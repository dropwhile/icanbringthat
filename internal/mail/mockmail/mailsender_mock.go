// Code generated by MockGen. DO NOT EDIT.
// Source: mail.go
//
// Generated by this command:
//
//	mockgen -source mail.go -destination mockmail/mailsender_mock.go -package mockmail
//

// Package mockmail is a generated GoMock package.
package mockmail

import (
	reflect "reflect"

	mail "github.com/dropwhile/icbt/internal/mail"
	gomock "go.uber.org/mock/gomock"
)

// MockMailSender is a mock of MailSender interface.
type MockMailSender struct {
	ctrl     *gomock.Controller
	recorder *MockMailSenderMockRecorder
}

// MockMailSenderMockRecorder is the mock recorder for MockMailSender.
type MockMailSenderMockRecorder struct {
	mock *MockMailSender
}

// NewMockMailSender creates a new mock instance.
func NewMockMailSender(ctrl *gomock.Controller) *MockMailSender {
	mock := &MockMailSender{ctrl: ctrl}
	mock.recorder = &MockMailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailSender) EXPECT() *MockMailSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMailSender) Send(arg0 string, arg1 []string, arg2, arg3, arg4 string, arg5 mail.MailHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailSenderMockRecorder) Send(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailSender)(nil).Send), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SendAsync mocks base method.
func (m *MockMailSender) SendAsync(arg0 string, arg1 []string, arg2, arg3, arg4 string, arg5 mail.MailHeader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendAsync", arg0, arg1, arg2, arg3, arg4, arg5)
}

// SendAsync indicates an expected call of SendAsync.
func (mr *MockMailSenderMockRecorder) SendAsync(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAsync", reflect.TypeOf((*MockMailSender)(nil).SendAsync), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SendRaw mocks base method.
func (m *MockMailSender) SendRaw(arg0 *mail.Mail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRaw", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRaw indicates an expected call of SendRaw.
func (mr *MockMailSenderMockRecorder) SendRaw(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRaw", reflect.TypeOf((*MockMailSender)(nil).SendRaw), arg0)
}
