// Code generated by mockery v2.39.1. DO NOT EDIT.

package mockmail

import (
	mail "github.com/dropwhile/icbt/internal/mail"
	mock "github.com/stretchr/testify/mock"
)

// MockMailSender is an autogenerated mock type for the MailSender type
type MockMailSender struct {
	mock.Mock
}

type MockMailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailSender) EXPECT() *MockMailSender_Expecter {
	return &MockMailSender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *MockMailSender) Send(_a0 string, _a1 []string, _a2 string, _a3 string, _a4 string, _a5 mail.MailHeader) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, string, string, string, mail.MailHeader) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockMailSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []string
//   - _a2 string
//   - _a3 string
//   - _a4 string
//   - _a5 mail.MailHeader
func (_e *MockMailSender_Expecter) Send(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}) *MockMailSender_Send_Call {
	return &MockMailSender_Send_Call{Call: _e.mock.On("Send", _a0, _a1, _a2, _a3, _a4, _a5)}
}

func (_c *MockMailSender_Send_Call) Run(run func(_a0 string, _a1 []string, _a2 string, _a3 string, _a4 string, _a5 mail.MailHeader)) *MockMailSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(string), args[3].(string), args[4].(string), args[5].(mail.MailHeader))
	})
	return _c
}

func (_c *MockMailSender_Send_Call) Return(_a0 error) *MockMailSender_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailSender_Send_Call) RunAndReturn(run func(string, []string, string, string, string, mail.MailHeader) error) *MockMailSender_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendAsync provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *MockMailSender) SendAsync(_a0 string, _a1 []string, _a2 string, _a3 string, _a4 string, _a5 mail.MailHeader) {
	_m.Called(_a0, _a1, _a2, _a3, _a4, _a5)
}

// MockMailSender_SendAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAsync'
type MockMailSender_SendAsync_Call struct {
	*mock.Call
}

// SendAsync is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []string
//   - _a2 string
//   - _a3 string
//   - _a4 string
//   - _a5 mail.MailHeader
func (_e *MockMailSender_Expecter) SendAsync(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}) *MockMailSender_SendAsync_Call {
	return &MockMailSender_SendAsync_Call{Call: _e.mock.On("SendAsync", _a0, _a1, _a2, _a3, _a4, _a5)}
}

func (_c *MockMailSender_SendAsync_Call) Run(run func(_a0 string, _a1 []string, _a2 string, _a3 string, _a4 string, _a5 mail.MailHeader)) *MockMailSender_SendAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(string), args[3].(string), args[4].(string), args[5].(mail.MailHeader))
	})
	return _c
}

func (_c *MockMailSender_SendAsync_Call) Return() *MockMailSender_SendAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMailSender_SendAsync_Call) RunAndReturn(run func(string, []string, string, string, string, mail.MailHeader)) *MockMailSender_SendAsync_Call {
	_c.Call.Return(run)
	return _c
}

// SendRaw provides a mock function with given fields: _a0
func (_m *MockMailSender) SendRaw(_a0 *mail.Mail) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendRaw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mail.Mail) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailSender_SendRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRaw'
type MockMailSender_SendRaw_Call struct {
	*mock.Call
}

// SendRaw is a helper method to define mock.On call
//   - _a0 *mail.Mail
func (_e *MockMailSender_Expecter) SendRaw(_a0 interface{}) *MockMailSender_SendRaw_Call {
	return &MockMailSender_SendRaw_Call{Call: _e.mock.On("SendRaw", _a0)}
}

func (_c *MockMailSender_SendRaw_Call) Run(run func(_a0 *mail.Mail)) *MockMailSender_SendRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mail.Mail))
	})
	return _c
}

func (_c *MockMailSender_SendRaw_Call) Return(_a0 error) *MockMailSender_SendRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailSender_SendRaw_Call) RunAndReturn(run func(*mail.Mail) error) *MockMailSender_SendRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailSender creates a new instance of MockMailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailSender {
	mock := &MockMailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
