// Code generated by refidgen. DO NOT EDIT.

package model

import (
	"fmt"

	"github.com/dropwhile/refid"
)

const tagValEventRefID = 2

type EventRefID struct {
	refid.RefID
}

func (r *EventRefID) checkResult(err error) error {
	if err != nil {
		return err
	}
	if !r.RefID.HasTag(tagValEventRefID) {
		return fmt.Errorf("wrong refid type")
	}
	return nil
}

func (r *EventRefID) Scan(src interface{}) error {
	err := r.RefID.Scan(src)
	return r.checkResult(err)
}

func (r *EventRefID) UnmarshalJSON(b []byte) error {
	err := r.RefID.UnmarshalJSON(b)
	return r.checkResult(err)
}

func (r *EventRefID) UnmarshalBinary(b []byte) error {
	err := r.RefID.UnmarshalJSON(b)
	return r.checkResult(err)
}

func NewEventRefID() (EventRefID, error) {
	v, err := refid.NewTagged(tagValEventRefID)
	return EventRefID{v}, err
}

func ParseEventRefID(s string) (EventRefID, error) {
	v, err := refid.ParseWithRequire(s, refid.HasTag(tagValEventRefID))
	return EventRefID{v}, err
}

func ParseEventRefIDWithRequire(s string, reqs ...refid.Requirement) (EventRefID, error) {
	reqs = append(reqs, refid.HasTag(tagValEventRefID))
	v, err := refid.ParseWithRequire(s, reqs...)
	return EventRefID{v}, err
}

type NullEventRefID struct {
	refid.NullRefID
}

func (u *NullEventRefID) checkResult(err error) error {
	if err != nil {
		return err
	}
	n := u.NullRefID
	if n.Valid && !n.RefID.HasTag(tagValEventRefID) {
		return fmt.Errorf("wrong refid type")
	}
	return nil
}


func (u *NullEventRefID) Scan(src interface{}) error {
	err := u.NullRefID.Scan(src)
	return u.checkResult(err)
}

func (u *NullEventRefID) UnmarshalJSON(b []byte) error {
	err := u.NullRefID.UnmarshalJSON(b)
	return u.checkResult(err)
}

type EventRefIDMatcher struct{}

func (a EventRefIDMatcher) Match(v interface{}) bool {
	var r refid.RefID
	var err error
	switch x := v.(type) {
	case EventRefID:
		r = x.RefID
	case *EventRefID:
		r = x.RefID
	case string:
		r, err = refid.Parse(x)
	case []byte:
		r, err = refid.FromBytes(x)
	default:
		return false
	}
	if err != nil {
		return false
	}
	return r.HasTag(tagValEventRefID)
}
