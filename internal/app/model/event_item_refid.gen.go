// Code generated by refidgen. DO NOT EDIT.
// generated from: event_item.go

package model

import (
	"fmt"

	"github.com/dropwhile/refid"
)

const tagValEventItemRefID = 3

type EventItemRefID struct {
	refid.ID
}

func (r *EventItemRefID) checkResult(err error) error {
	if err != nil {
		return err
	}
	if !r.ID.HasTag(tagValEventItemRefID) {
		return fmt.Errorf("wrong refid type")
	}
	return nil
}

func (r *EventItemRefID) Scan(src interface{}) error {
	err := r.ID.Scan(src)
	return r.checkResult(err)
}

func (r *EventItemRefID) UnmarshalJSON(b []byte) error {
	err := r.ID.UnmarshalJSON(b)
	return r.checkResult(err)
}

func (r *EventItemRefID) UnmarshalBinary(b []byte) error {
	err := r.ID.UnmarshalBinary(b)
	return r.checkResult(err)
}

func NewEventItemRefID() (EventItemRefID, error) {
	v, err := refid.NewTagged(tagValEventItemRefID)
	return EventItemRefID{v}, err
}

func ParseEventItemRefID(s string) (EventItemRefID, error) {
	v, err := refid.ParseWithRequire(s, refid.HasTag(tagValEventItemRefID))
	return EventItemRefID{v}, err
}

func ParseEventItemRefIDWithRequire(s string, reqs ...refid.Requirement) (EventItemRefID, error) {
	reqs = append(reqs, refid.HasTag(tagValEventItemRefID))
	v, err := refid.ParseWithRequire(s, reqs...)
	return EventItemRefID{v}, err
}

func EventItemRefIDFromBytes(input []byte) (EventItemRefID, error) {
	var r EventItemRefID
	err := r.UnmarshalBinary(input)
	return r, err
}

type NullEventItemRefID struct {
	refid.NullID
}

func (u *NullEventItemRefID) checkResult(err error) error {
	if err != nil {
		return err
	}
	n := u.NullID
	if n.Valid && !n.ID.HasTag(tagValEventItemRefID) {
		return fmt.Errorf("wrong refid type")
	}
	return nil
}


func (u *NullEventItemRefID) Scan(src interface{}) error {
	err := u.NullID.Scan(src)
	return u.checkResult(err)
}

func (u *NullEventItemRefID) UnmarshalJSON(b []byte) error {
	err := u.NullID.UnmarshalJSON(b)
	return u.checkResult(err)
}

type EventItemRefIDMatcher struct{}

func (a EventItemRefIDMatcher) Match(v interface{}) bool {
	var r refid.ID
	var err error
	switch x := v.(type) {
	case EventItemRefID:
		r = x.ID
	case *EventItemRefID:
		r = x.ID
	case string:
		r, err = refid.Parse(x)
	case []byte:
		r, err = refid.FromBytes(x)
	default:
		return false
	}
	if err != nil {
		return false
	}
	return r.HasTag(tagValEventItemRefID)
}
