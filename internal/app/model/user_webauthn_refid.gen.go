// Code generated by refidgen. DO NOT EDIT.
// generated from: user_webauthn.go

package model

import (
	"fmt"

	"github.com/dropwhile/refid"
)

const tagValCredentialRefID = 7

type CredentialRefID struct {
	refid.ID
}

func (r *CredentialRefID) checkResult(err error) error {
	if err != nil {
		return err
	}
	if !r.ID.HasTag(tagValCredentialRefID) {
		return fmt.Errorf("wrong refid type")
	}
	return nil
}

func (r *CredentialRefID) Scan(src interface{}) error {
	err := r.ID.Scan(src)
	return r.checkResult(err)
}

func (r *CredentialRefID) UnmarshalJSON(b []byte) error {
	err := r.ID.UnmarshalJSON(b)
	return r.checkResult(err)
}

func (r *CredentialRefID) UnmarshalBinary(b []byte) error {
	err := r.ID.UnmarshalBinary(b)
	return r.checkResult(err)
}

func NewCredentialRefID() (CredentialRefID, error) {
	v, err := refid.NewTagged(tagValCredentialRefID)
	return CredentialRefID{v}, err
}

func ParseCredentialRefID(s string) (CredentialRefID, error) {
	v, err := refid.ParseWithRequire(s, refid.HasTag(tagValCredentialRefID))
	return CredentialRefID{v}, err
}

func ParseCredentialRefIDWithRequire(s string, reqs ...refid.Requirement) (CredentialRefID, error) {
	reqs = append(reqs, refid.HasTag(tagValCredentialRefID))
	v, err := refid.ParseWithRequire(s, reqs...)
	return CredentialRefID{v}, err
}

func CredentialRefIDFromBytes(input []byte) (CredentialRefID, error) {
	var r CredentialRefID
	err := r.UnmarshalBinary(input)
	return r, err
}

type NullCredentialRefID struct {
	refid.NullID
}

func (u *NullCredentialRefID) checkResult(err error) error {
	if err != nil {
		return err
	}
	n := u.NullID
	if n.Valid && !n.ID.HasTag(tagValCredentialRefID) {
		return fmt.Errorf("wrong refid type")
	}
	return nil
}


func (u *NullCredentialRefID) Scan(src interface{}) error {
	err := u.NullID.Scan(src)
	return u.checkResult(err)
}

func (u *NullCredentialRefID) UnmarshalJSON(b []byte) error {
	err := u.NullID.UnmarshalJSON(b)
	return u.checkResult(err)
}

type CredentialRefIDMatcher struct{}

func (a CredentialRefIDMatcher) Match(v interface{}) bool {
	var r refid.ID
	var err error
	switch x := v.(type) {
	case CredentialRefID:
		r = x.ID
	case *CredentialRefID:
		r = x.ID
	case string:
		r, err = refid.Parse(x)
	case []byte:
		r, err = refid.FromBytes(x)
	default:
		return false
	}
	if err != nil {
		return false
	}
	return r.HasTag(tagValCredentialRefID)
}
