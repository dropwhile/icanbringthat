// Code generated by refidgen. DO NOT EDIT.
// generated from: user_verify.go

package model

import (
	"fmt"

	"github.com/dropwhile/refid"
)

const tagValUserVerifyRefID = 6

type UserVerifyRefID struct {
	refid.ID
}

func (r *UserVerifyRefID) checkResult(err error) error {
	if err != nil {
		return err
	}
	if !r.ID.HasTag(tagValUserVerifyRefID) {
		return fmt.Errorf("wrong refid type")
	}
	return nil
}

func (r *UserVerifyRefID) Scan(src interface{}) error {
	err := r.ID.Scan(src)
	return r.checkResult(err)
}

func (r *UserVerifyRefID) UnmarshalJSON(b []byte) error {
	err := r.ID.UnmarshalJSON(b)
	return r.checkResult(err)
}

func (r *UserVerifyRefID) UnmarshalBinary(b []byte) error {
	err := r.ID.UnmarshalBinary(b)
	return r.checkResult(err)
}

func NewUserVerifyRefID() (UserVerifyRefID, error) {
	v, err := refid.NewTagged(tagValUserVerifyRefID)
	return UserVerifyRefID{v}, err
}

func ParseUserVerifyRefID(s string) (UserVerifyRefID, error) {
	v, err := refid.ParseWithRequire(s, refid.HasTag(tagValUserVerifyRefID))
	return UserVerifyRefID{v}, err
}

func ParseUserVerifyRefIDWithRequire(s string, reqs ...refid.Requirement) (UserVerifyRefID, error) {
	reqs = append(reqs, refid.HasTag(tagValUserVerifyRefID))
	v, err := refid.ParseWithRequire(s, reqs...)
	return UserVerifyRefID{v}, err
}

func UserVerifyRefIDFromBytes(input []byte) (UserVerifyRefID, error) {
	var r UserVerifyRefID
	err := r.UnmarshalBinary(input)
	return r, err
}

type NullUserVerifyRefID struct {
	refid.NullID
}

func (u *NullUserVerifyRefID) checkResult(err error) error {
	if err != nil {
		return err
	}
	n := u.NullID
	if n.Valid && !n.ID.HasTag(tagValUserVerifyRefID) {
		return fmt.Errorf("wrong refid type")
	}
	return nil
}


func (u *NullUserVerifyRefID) Scan(src interface{}) error {
	err := u.NullID.Scan(src)
	return u.checkResult(err)
}

func (u *NullUserVerifyRefID) UnmarshalJSON(b []byte) error {
	err := u.NullID.UnmarshalJSON(b)
	return u.checkResult(err)
}

type UserVerifyRefIDMatcher struct{}

func (a UserVerifyRefIDMatcher) Match(v interface{}) bool {
	var r refid.ID
	var err error
	switch x := v.(type) {
	case UserVerifyRefID:
		r = x.ID
	case *UserVerifyRefID:
		r = x.ID
	case string:
		r, err = refid.Parse(x)
	case []byte:
		r, err = refid.FromBytes(x)
	default:
		return false
	}
	if err != nil {
		return false
	}
	return r.HasTag(tagValUserVerifyRefID)
}
