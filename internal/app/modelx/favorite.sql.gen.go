// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: favorite.sql

package modelx

import (
	"context"
)

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorite_ (
    user_id, event_id
)
VALUES ($1, $2)
RETURNING id, user_id, event_id, created
`

func (q *Queries) CreateFavorite(ctx context.Context, userID int32, eventID int32) (Favorite, error) {
	row := q.db.QueryRow(ctx, createFavorite, userID, eventID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Created,
	)
	return i, err
}

const deleteFavorite = `-- name: DeleteFavorite :exec
DELETE FROM favorite_
WHERE id = $1
`

func (q *Queries) DeleteFavorite(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFavorite, id)
	return err
}

const getFavoriteById = `-- name: GetFavoriteById :one
SELECT id, user_id, event_id, created FROM favorite_
WHERE id = $1
`

// @sqlc-vet-disable
func (q *Queries) GetFavoriteById(ctx context.Context, id int32) (Favorite, error) {
	row := q.db.QueryRow(ctx, getFavoriteById, id)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Created,
	)
	return i, err
}

const getFavoriteByUserEvent = `-- name: GetFavoriteByUserEvent :one
SELECT id, user_id, event_id, created FROM favorite_
WHERE
    user_id = $1 AND
    event_id = $2
`

// @sqlc-vet-disable
func (q *Queries) GetFavoriteByUserEvent(ctx context.Context, userID int32, eventID int32) (Favorite, error) {
	row := q.db.QueryRow(ctx, getFavoriteByUserEvent, userID, eventID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Created,
	)
	return i, err
}

const getFavoriteCountByUser = `-- name: GetFavoriteCountByUser :one
SELECT count(*) FROM favorite_
WHERE user_id = $1
`

func (q *Queries) GetFavoriteCountByUser(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getFavoriteCountByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFavoritesByEventId = `-- name: GetFavoritesByEventId :many
SELECT id, user_id, event_id, created FROM favorite_
WHERE event_id = $1
ORDER BY
    created DESC,
    id DESC
`

func (q *Queries) GetFavoritesByEventId(ctx context.Context, eventID int32) ([]Favorite, error) {
	rows, err := q.db.Query(ctx, getFavoritesByEventId, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavoritesByUserId = `-- name: GetFavoritesByUserId :many
SELECT id, user_id, event_id, created FROM favorite_
WHERE user_id = $1
ORDER BY
    created DESC,
    id DESC
`

func (q *Queries) GetFavoritesByUserId(ctx context.Context, userID int32) ([]Favorite, error) {
	rows, err := q.db.Query(ctx, getFavoritesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavoritesByUserPaginated = `-- name: GetFavoritesByUserPaginated :many
SELECT 
    favorite_.id, favorite_.user_id, favorite_.event_id, favorite_.created
FROM favorite_ 
JOIN event_ ON
    favorite_.event_id = event_.id
WHERE favorite_.user_id = $1 
ORDER BY 
    event_.start_time DESC,
    event_.id DESC
LIMIT $2 OFFSET $3
`

type GetFavoritesByUserPaginatedParams struct {
	UserID int32 `db:"user_id" json:"user_id"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetFavoritesByUserPaginated(ctx context.Context, arg GetFavoritesByUserPaginatedParams) ([]Favorite, error) {
	rows, err := q.db.Query(ctx, getFavoritesByUserPaginated, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
