// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package modelx

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user_ (
    ref_id, email, name, pwhash
)
VALUES (
    $1, $2, $3, $4
)
RETURNING id, ref_id, email, name, pwhash, created, last_modified, verified
`

type CreateUserParams struct {
	RefID  UserRefID `db:"ref_id" json:"ref_id"`
	Email  string    `db:"email" json:"email"`
	Name   string    `db:"name" json:"name"`
	PwHash []byte    `db:"pwhash" json:"-"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.RefID,
		arg.Email,
		arg.Name,
		arg.PwHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.Email,
		&i.Name,
		&i.PwHash,
		&i.Created,
		&i.LastModified,
		&i.Verified,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user_
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, ref_id, email, name, pwhash, created, last_modified, verified FROM user_
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.Email,
		&i.Name,
		&i.PwHash,
		&i.Created,
		&i.LastModified,
		&i.Verified,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, ref_id, email, name, pwhash, created, last_modified, verified FROM user_
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.Email,
		&i.Name,
		&i.PwHash,
		&i.Created,
		&i.LastModified,
		&i.Verified,
	)
	return i, err
}

const getUserByRefID = `-- name: GetUserByRefID :one
SELECT id, ref_id, email, name, pwhash, created, last_modified, verified FROM user_
WHERE ref_id = $1
`

func (q *Queries) GetUserByRefID(ctx context.Context, refID UserRefID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByRefID, refID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.Email,
		&i.Name,
		&i.PwHash,
		&i.Created,
		&i.LastModified,
		&i.Verified,
	)
	return i, err
}

const getUsersByIds = `-- name: GetUsersByIds :many
SELECT id, ref_id, email, name, pwhash, created, last_modified, verified FROM user_
WHERE id = ANY($1::int[])
`

func (q *Queries) GetUsersByIds(ctx context.Context, ids []int32) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByIds, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.RefID,
			&i.Email,
			&i.Name,
			&i.PwHash,
			&i.Created,
			&i.LastModified,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user_
SET 
    email = COALESCE($1, email),
    name = COALESCE($2, name),
    pwhash = COALESCE($3, pwhash),
    verified = COALESCE($4, verified)
WHERE id = $5
`

type UpdateUserParams struct {
	Email    pgtype.Text `db:"email" json:"email"`
	Name     pgtype.Text `db:"name" json:"name"`
	PwHash   []byte      `db:"pwhash" json:"-"`
	Verified pgtype.Bool `db:"verified" json:"verified"`
	ID       int32       `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.Name,
		arg.PwHash,
		arg.Verified,
		arg.ID,
	)
	return err
}
