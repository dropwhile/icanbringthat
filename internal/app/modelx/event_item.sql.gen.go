// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: event_item.sql

package modelx

import (
	"context"

	"github.com/dropwhile/refid"
)

const createEventItem = `-- name: CreateEventItem :one
INSERT INTO event_item_ (
    ref_id, event_id, description
)
VALUES (
    $1, $2, $3
)
RETURNING id, ref_id, event_id, description, created, last_modified
`

type CreateEventItemParams struct {
	RefID       refid.RefID `db:"ref_id" json:"ref_id"`
	EventID     int32       `db:"event_id" json:"event_id"`
	Description string      `db:"description" json:"description"`
}

func (q *Queries) CreateEventItem(ctx context.Context, arg CreateEventItemParams) (EventItem, error) {
	row := q.db.QueryRow(ctx, createEventItem, arg.RefID, arg.EventID, arg.Description)
	var i EventItem
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.EventID,
		&i.Description,
		&i.Created,
		&i.LastModified,
	)
	return i, err
}

const deleteEventItem = `-- name: DeleteEventItem :exec
DELETE FROM event_item_
WHERE id = $1
`

func (q *Queries) DeleteEventItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEventItem, id)
	return err
}

const getEventItemById = `-- name: GetEventItemById :one
SELECT id, ref_id, event_id, description, created, last_modified FROM event_item_
WHERE id = $1
`

func (q *Queries) GetEventItemById(ctx context.Context, id int32) (EventItem, error) {
	row := q.db.QueryRow(ctx, getEventItemById, id)
	var i EventItem
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.EventID,
		&i.Description,
		&i.Created,
		&i.LastModified,
	)
	return i, err
}

const getEventItemByRefId = `-- name: GetEventItemByRefId :one
SELECT id, ref_id, event_id, description, created, last_modified FROM event_item_
WHERE ref_id = $1
`

func (q *Queries) GetEventItemByRefId(ctx context.Context, refID refid.RefID) (EventItem, error) {
	row := q.db.QueryRow(ctx, getEventItemByRefId, refID)
	var i EventItem
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.EventID,
		&i.Description,
		&i.Created,
		&i.LastModified,
	)
	return i, err
}

const getEventItemsByEvent = `-- name: GetEventItemsByEvent :many
SELECT id, ref_id, event_id, description, created, last_modified FROM event_item_
WHERE event_id = $1
ORDER BY
    created DESC,
    id DESC
`

func (q *Queries) GetEventItemsByEvent(ctx context.Context, eventID int32) ([]EventItem, error) {
	rows, err := q.db.Query(ctx, getEventItemsByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventItem
	for rows.Next() {
		var i EventItem
		if err := rows.Scan(
			&i.ID,
			&i.RefID,
			&i.EventID,
			&i.Description,
			&i.Created,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventItem = `-- name: UpdateEventItem :exec
UPDATE event_item_
SET
    description = $1
WHERE id = $2
`

func (q *Queries) UpdateEventItem(ctx context.Context, description string, iD int32) error {
	_, err := q.db.Exec(ctx, updateEventItem, description, iD)
	return err
}
