// Code generated by MockGen. DO NOT EDIT.
// Source: servicer_iface.go
//
// Generated by this command:
//
//	mockgen -source servicer_iface.go -destination mockservice/servicer_mock.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/dropwhile/icbt/internal/app/model"
	resources "github.com/dropwhile/icbt/internal/app/resources"
	service "github.com/dropwhile/icbt/internal/app/service"
	errs "github.com/dropwhile/icbt/internal/errs"
	mail "github.com/dropwhile/icbt/internal/mail"
	gomock "go.uber.org/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// AddEventItem mocks base method.
func (m *MockServicer) AddEventItem(ctx context.Context, userID int, refID model.EventRefID, description string) (*model.EventItem, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventItem", ctx, userID, refID, description)
	ret0, _ := ret[0].(*model.EventItem)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// AddEventItem indicates an expected call of AddEventItem.
func (mr *MockServicerMockRecorder) AddEventItem(ctx, userID, refID, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventItem", reflect.TypeOf((*MockServicer)(nil).AddEventItem), ctx, userID, refID, description)
}

// AddFavorite mocks base method.
func (m *MockServicer) AddFavorite(ctx context.Context, userID int, refID model.EventRefID) (*model.Event, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavorite", ctx, userID, refID)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// AddFavorite indicates an expected call of AddFavorite.
func (mr *MockServicerMockRecorder) AddFavorite(ctx, userID, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavorite", reflect.TypeOf((*MockServicer)(nil).AddFavorite), ctx, userID, refID)
}

// ArchiveOldEvents mocks base method.
func (m *MockServicer) ArchiveOldEvents(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveOldEvents", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveOldEvents indicates an expected call of ArchiveOldEvents.
func (mr *MockServicerMockRecorder) ArchiveOldEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveOldEvents", reflect.TypeOf((*MockServicer)(nil).ArchiveOldEvents), ctx)
}

// CreateEvent mocks base method.
func (m *MockServicer) CreateEvent(ctx context.Context, user *model.User, name, description string, when time.Time, tz string) (*model.Event, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, user, name, description, when, tz)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockServicerMockRecorder) CreateEvent(ctx, user, name, description, when, tz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockServicer)(nil).CreateEvent), ctx, user, name, description, when, tz)
}

// DeleteAllNotifications mocks base method.
func (m *MockServicer) DeleteAllNotifications(ctx context.Context, userID int) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllNotifications", ctx, userID)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// DeleteAllNotifications indicates an expected call of DeleteAllNotifications.
func (mr *MockServicerMockRecorder) DeleteAllNotifications(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllNotifications", reflect.TypeOf((*MockServicer)(nil).DeleteAllNotifications), ctx, userID)
}

// DeleteEarmark mocks base method.
func (m *MockServicer) DeleteEarmark(ctx context.Context, userID int, earmark *model.Earmark) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEarmark", ctx, userID, earmark)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// DeleteEarmark indicates an expected call of DeleteEarmark.
func (mr *MockServicerMockRecorder) DeleteEarmark(ctx, userID, earmark any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEarmark", reflect.TypeOf((*MockServicer)(nil).DeleteEarmark), ctx, userID, earmark)
}

// DeleteEarmarkByRefID mocks base method.
func (m *MockServicer) DeleteEarmarkByRefID(ctx context.Context, userID int, refID model.EarmarkRefID) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEarmarkByRefID", ctx, userID, refID)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// DeleteEarmarkByRefID indicates an expected call of DeleteEarmarkByRefID.
func (mr *MockServicerMockRecorder) DeleteEarmarkByRefID(ctx, userID, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEarmarkByRefID", reflect.TypeOf((*MockServicer)(nil).DeleteEarmarkByRefID), ctx, userID, refID)
}

// DeleteEvent mocks base method.
func (m *MockServicer) DeleteEvent(ctx context.Context, userID int, refID model.EventRefID) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, userID, refID)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockServicerMockRecorder) DeleteEvent(ctx, userID, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockServicer)(nil).DeleteEvent), ctx, userID, refID)
}

// DeleteNotification mocks base method.
func (m *MockServicer) DeleteNotification(ctx context.Context, userID int, refID model.NotificationRefID) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", ctx, userID, refID)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockServicerMockRecorder) DeleteNotification(ctx, userID, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockServicer)(nil).DeleteNotification), ctx, userID, refID)
}

// DeleteUser mocks base method.
func (m *MockServicer) DeleteUser(ctx context.Context, userID int) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockServicerMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockServicer)(nil).DeleteUser), ctx, userID)
}

// DeleteUserCredential mocks base method.
func (m *MockServicer) DeleteUserCredential(ctx context.Context, user *model.User, refID model.CredentialRefID) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserCredential", ctx, user, refID)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// DeleteUserCredential indicates an expected call of DeleteUserCredential.
func (mr *MockServicerMockRecorder) DeleteUserCredential(ctx, user, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserCredential", reflect.TypeOf((*MockServicer)(nil).DeleteUserCredential), ctx, user, refID)
}

// DisableRemindersWithNotification mocks base method.
func (m *MockServicer) DisableRemindersWithNotification(ctx context.Context, email, suppressionReason string) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRemindersWithNotification", ctx, email, suppressionReason)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// DisableRemindersWithNotification indicates an expected call of DisableRemindersWithNotification.
func (mr *MockServicerMockRecorder) DisableRemindersWithNotification(ctx, email, suppressionReason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRemindersWithNotification", reflect.TypeOf((*MockServicer)(nil).DisableRemindersWithNotification), ctx, email, suppressionReason)
}

// GetApiKeyByUser mocks base method.
func (m *MockServicer) GetApiKeyByUser(ctx context.Context, userID int) (*model.ApiKey, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKeyByUser", ctx, userID)
	ret0, _ := ret[0].(*model.ApiKey)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetApiKeyByUser indicates an expected call of GetApiKeyByUser.
func (mr *MockServicerMockRecorder) GetApiKeyByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeyByUser", reflect.TypeOf((*MockServicer)(nil).GetApiKeyByUser), ctx, userID)
}

// GetEarmark mocks base method.
func (m *MockServicer) GetEarmark(ctx context.Context, refID model.EarmarkRefID) (*model.Earmark, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarmark", ctx, refID)
	ret0, _ := ret[0].(*model.Earmark)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEarmark indicates an expected call of GetEarmark.
func (mr *MockServicerMockRecorder) GetEarmark(ctx, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarmark", reflect.TypeOf((*MockServicer)(nil).GetEarmark), ctx, refID)
}

// GetEarmarkByEventItemID mocks base method.
func (m *MockServicer) GetEarmarkByEventItemID(ctx context.Context, eventItemID int) (*model.Earmark, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarmarkByEventItemID", ctx, eventItemID)
	ret0, _ := ret[0].(*model.Earmark)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEarmarkByEventItemID indicates an expected call of GetEarmarkByEventItemID.
func (mr *MockServicerMockRecorder) GetEarmarkByEventItemID(ctx, eventItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarmarkByEventItemID", reflect.TypeOf((*MockServicer)(nil).GetEarmarkByEventItemID), ctx, eventItemID)
}

// GetEarmarks mocks base method.
func (m *MockServicer) GetEarmarks(ctx context.Context, userID int, archived bool) ([]*model.Earmark, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarmarks", ctx, userID, archived)
	ret0, _ := ret[0].([]*model.Earmark)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEarmarks indicates an expected call of GetEarmarks.
func (mr *MockServicerMockRecorder) GetEarmarks(ctx, userID, archived any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarmarks", reflect.TypeOf((*MockServicer)(nil).GetEarmarks), ctx, userID, archived)
}

// GetEarmarksByEventID mocks base method.
func (m *MockServicer) GetEarmarksByEventID(ctx context.Context, eventID int) ([]*model.Earmark, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarmarksByEventID", ctx, eventID)
	ret0, _ := ret[0].([]*model.Earmark)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEarmarksByEventID indicates an expected call of GetEarmarksByEventID.
func (mr *MockServicerMockRecorder) GetEarmarksByEventID(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarmarksByEventID", reflect.TypeOf((*MockServicer)(nil).GetEarmarksByEventID), ctx, eventID)
}

// GetEarmarksCount mocks base method.
func (m *MockServicer) GetEarmarksCount(ctx context.Context, userID int) (*model.BifurcatedRowCounts, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarmarksCount", ctx, userID)
	ret0, _ := ret[0].(*model.BifurcatedRowCounts)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEarmarksCount indicates an expected call of GetEarmarksCount.
func (mr *MockServicerMockRecorder) GetEarmarksCount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarmarksCount", reflect.TypeOf((*MockServicer)(nil).GetEarmarksCount), ctx, userID)
}

// GetEarmarksPaginated mocks base method.
func (m *MockServicer) GetEarmarksPaginated(ctx context.Context, userID, limit, offset int, archived bool) ([]*model.Earmark, *service.Pagination, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarmarksPaginated", ctx, userID, limit, offset, archived)
	ret0, _ := ret[0].([]*model.Earmark)
	ret1, _ := ret[1].(*service.Pagination)
	ret2, _ := ret[2].(errs.Error)
	return ret0, ret1, ret2
}

// GetEarmarksPaginated indicates an expected call of GetEarmarksPaginated.
func (mr *MockServicerMockRecorder) GetEarmarksPaginated(ctx, userID, limit, offset, archived any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarmarksPaginated", reflect.TypeOf((*MockServicer)(nil).GetEarmarksPaginated), ctx, userID, limit, offset, archived)
}

// GetEvent mocks base method.
func (m *MockServicer) GetEvent(ctx context.Context, refID model.EventRefID) (*model.Event, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, refID)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockServicerMockRecorder) GetEvent(ctx, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockServicer)(nil).GetEvent), ctx, refID)
}

// GetEventByID mocks base method.
func (m *MockServicer) GetEventByID(ctx context.Context, ID int) (*model.Event, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, ID)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockServicerMockRecorder) GetEventByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockServicer)(nil).GetEventByID), ctx, ID)
}

// GetEventItem mocks base method.
func (m *MockServicer) GetEventItem(ctx context.Context, eventItemRefID model.EventItemRefID) (*model.EventItem, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventItem", ctx, eventItemRefID)
	ret0, _ := ret[0].(*model.EventItem)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEventItem indicates an expected call of GetEventItem.
func (mr *MockServicerMockRecorder) GetEventItem(ctx, eventItemRefID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventItem", reflect.TypeOf((*MockServicer)(nil).GetEventItem), ctx, eventItemRefID)
}

// GetEventItemByID mocks base method.
func (m *MockServicer) GetEventItemByID(ctx context.Context, eventItemID int) (*model.EventItem, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventItemByID", ctx, eventItemID)
	ret0, _ := ret[0].(*model.EventItem)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEventItemByID indicates an expected call of GetEventItemByID.
func (mr *MockServicerMockRecorder) GetEventItemByID(ctx, eventItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventItemByID", reflect.TypeOf((*MockServicer)(nil).GetEventItemByID), ctx, eventItemID)
}

// GetEventItemsByEvent mocks base method.
func (m *MockServicer) GetEventItemsByEvent(ctx context.Context, refID model.EventRefID) ([]*model.EventItem, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventItemsByEvent", ctx, refID)
	ret0, _ := ret[0].([]*model.EventItem)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEventItemsByEvent indicates an expected call of GetEventItemsByEvent.
func (mr *MockServicerMockRecorder) GetEventItemsByEvent(ctx, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventItemsByEvent", reflect.TypeOf((*MockServicer)(nil).GetEventItemsByEvent), ctx, refID)
}

// GetEventItemsByEventID mocks base method.
func (m *MockServicer) GetEventItemsByEventID(ctx context.Context, eventID int) ([]*model.EventItem, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventItemsByEventID", ctx, eventID)
	ret0, _ := ret[0].([]*model.EventItem)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEventItemsByEventID indicates an expected call of GetEventItemsByEventID.
func (mr *MockServicerMockRecorder) GetEventItemsByEventID(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventItemsByEventID", reflect.TypeOf((*MockServicer)(nil).GetEventItemsByEventID), ctx, eventID)
}

// GetEventItemsByIDs mocks base method.
func (m *MockServicer) GetEventItemsByIDs(ctx context.Context, eventItemIDs []int) ([]*model.EventItem, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventItemsByIDs", ctx, eventItemIDs)
	ret0, _ := ret[0].([]*model.EventItem)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEventItemsByIDs indicates an expected call of GetEventItemsByIDs.
func (mr *MockServicerMockRecorder) GetEventItemsByIDs(ctx, eventItemIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventItemsByIDs", reflect.TypeOf((*MockServicer)(nil).GetEventItemsByIDs), ctx, eventItemIDs)
}

// GetEventItemsCount mocks base method.
func (m *MockServicer) GetEventItemsCount(ctx context.Context, eventIDs []int) ([]*model.EventItemCount, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventItemsCount", ctx, eventIDs)
	ret0, _ := ret[0].([]*model.EventItemCount)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEventItemsCount indicates an expected call of GetEventItemsCount.
func (mr *MockServicerMockRecorder) GetEventItemsCount(ctx, eventIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventItemsCount", reflect.TypeOf((*MockServicer)(nil).GetEventItemsCount), ctx, eventIDs)
}

// GetEvents mocks base method.
func (m *MockServicer) GetEvents(ctx context.Context, userID int, archived bool) ([]*model.Event, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, userID, archived)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockServicerMockRecorder) GetEvents(ctx, userID, archived any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockServicer)(nil).GetEvents), ctx, userID, archived)
}

// GetEventsByIDs mocks base method.
func (m *MockServicer) GetEventsByIDs(ctx context.Context, eventIDs []int) ([]*model.Event, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByIDs", ctx, eventIDs)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEventsByIDs indicates an expected call of GetEventsByIDs.
func (mr *MockServicerMockRecorder) GetEventsByIDs(ctx, eventIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByIDs", reflect.TypeOf((*MockServicer)(nil).GetEventsByIDs), ctx, eventIDs)
}

// GetEventsComingSoonPaginated mocks base method.
func (m *MockServicer) GetEventsComingSoonPaginated(ctx context.Context, userID, limit, offset int) ([]*model.Event, *service.Pagination, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsComingSoonPaginated", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(*service.Pagination)
	ret2, _ := ret[2].(errs.Error)
	return ret0, ret1, ret2
}

// GetEventsComingSoonPaginated indicates an expected call of GetEventsComingSoonPaginated.
func (mr *MockServicerMockRecorder) GetEventsComingSoonPaginated(ctx, userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsComingSoonPaginated", reflect.TypeOf((*MockServicer)(nil).GetEventsComingSoonPaginated), ctx, userID, limit, offset)
}

// GetEventsCount mocks base method.
func (m *MockServicer) GetEventsCount(ctx context.Context, userID int) (*model.BifurcatedRowCounts, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsCount", ctx, userID)
	ret0, _ := ret[0].(*model.BifurcatedRowCounts)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetEventsCount indicates an expected call of GetEventsCount.
func (mr *MockServicerMockRecorder) GetEventsCount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsCount", reflect.TypeOf((*MockServicer)(nil).GetEventsCount), ctx, userID)
}

// GetEventsPaginated mocks base method.
func (m *MockServicer) GetEventsPaginated(ctx context.Context, userID, limit, offset int, archived bool) ([]*model.Event, *service.Pagination, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsPaginated", ctx, userID, limit, offset, archived)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(*service.Pagination)
	ret2, _ := ret[2].(errs.Error)
	return ret0, ret1, ret2
}

// GetEventsPaginated indicates an expected call of GetEventsPaginated.
func (mr *MockServicerMockRecorder) GetEventsPaginated(ctx, userID, limit, offset, archived any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsPaginated", reflect.TypeOf((*MockServicer)(nil).GetEventsPaginated), ctx, userID, limit, offset, archived)
}

// GetFavoriteByUserEvent mocks base method.
func (m *MockServicer) GetFavoriteByUserEvent(ctx context.Context, userID, eventID int) (*model.Favorite, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteByUserEvent", ctx, userID, eventID)
	ret0, _ := ret[0].(*model.Favorite)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetFavoriteByUserEvent indicates an expected call of GetFavoriteByUserEvent.
func (mr *MockServicerMockRecorder) GetFavoriteByUserEvent(ctx, userID, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteByUserEvent", reflect.TypeOf((*MockServicer)(nil).GetFavoriteByUserEvent), ctx, userID, eventID)
}

// GetFavoriteEvents mocks base method.
func (m *MockServicer) GetFavoriteEvents(ctx context.Context, userID int, archived bool) ([]*model.Event, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteEvents", ctx, userID, archived)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetFavoriteEvents indicates an expected call of GetFavoriteEvents.
func (mr *MockServicerMockRecorder) GetFavoriteEvents(ctx, userID, archived any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteEvents", reflect.TypeOf((*MockServicer)(nil).GetFavoriteEvents), ctx, userID, archived)
}

// GetFavoriteEventsCount mocks base method.
func (m *MockServicer) GetFavoriteEventsCount(ctx context.Context, userID int) (*model.BifurcatedRowCounts, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteEventsCount", ctx, userID)
	ret0, _ := ret[0].(*model.BifurcatedRowCounts)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetFavoriteEventsCount indicates an expected call of GetFavoriteEventsCount.
func (mr *MockServicerMockRecorder) GetFavoriteEventsCount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteEventsCount", reflect.TypeOf((*MockServicer)(nil).GetFavoriteEventsCount), ctx, userID)
}

// GetFavoriteEventsPaginated mocks base method.
func (m *MockServicer) GetFavoriteEventsPaginated(ctx context.Context, userID, limit, offset int, archived bool) ([]*model.Event, *service.Pagination, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteEventsPaginated", ctx, userID, limit, offset, archived)
	ret0, _ := ret[0].([]*model.Event)
	ret1, _ := ret[1].(*service.Pagination)
	ret2, _ := ret[2].(errs.Error)
	return ret0, ret1, ret2
}

// GetFavoriteEventsPaginated indicates an expected call of GetFavoriteEventsPaginated.
func (mr *MockServicerMockRecorder) GetFavoriteEventsPaginated(ctx, userID, limit, offset, archived any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteEventsPaginated", reflect.TypeOf((*MockServicer)(nil).GetFavoriteEventsPaginated), ctx, userID, limit, offset, archived)
}

// GetNotifications mocks base method.
func (m *MockServicer) GetNotifications(ctx context.Context, userID int) ([]*model.Notification, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", ctx, userID)
	ret0, _ := ret[0].([]*model.Notification)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockServicerMockRecorder) GetNotifications(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockServicer)(nil).GetNotifications), ctx, userID)
}

// GetNotificationsCount mocks base method.
func (m *MockServicer) GetNotificationsCount(ctx context.Context, userID int) (int, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsCount", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetNotificationsCount indicates an expected call of GetNotificationsCount.
func (mr *MockServicerMockRecorder) GetNotificationsCount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsCount", reflect.TypeOf((*MockServicer)(nil).GetNotificationsCount), ctx, userID)
}

// GetNotificationsPaginated mocks base method.
func (m *MockServicer) GetNotificationsPaginated(ctx context.Context, userID, limit, offset int) ([]*model.Notification, *service.Pagination, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsPaginated", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]*model.Notification)
	ret1, _ := ret[1].(*service.Pagination)
	ret2, _ := ret[2].(errs.Error)
	return ret0, ret1, ret2
}

// GetNotificationsPaginated indicates an expected call of GetNotificationsPaginated.
func (mr *MockServicerMockRecorder) GetNotificationsPaginated(ctx, userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsPaginated", reflect.TypeOf((*MockServicer)(nil).GetNotificationsPaginated), ctx, userID, limit, offset)
}

// GetUser mocks base method.
func (m *MockServicer) GetUser(ctx context.Context, refID model.UserRefID) (*model.User, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, refID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockServicerMockRecorder) GetUser(ctx, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockServicer)(nil).GetUser), ctx, refID)
}

// GetUserByApiKey mocks base method.
func (m *MockServicer) GetUserByApiKey(ctx context.Context, token string) (*model.User, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByApiKey", ctx, token)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUserByApiKey indicates an expected call of GetUserByApiKey.
func (mr *MockServicerMockRecorder) GetUserByApiKey(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByApiKey", reflect.TypeOf((*MockServicer)(nil).GetUserByApiKey), ctx, token)
}

// GetUserByEmail mocks base method.
func (m *MockServicer) GetUserByEmail(ctx context.Context, email string) (*model.User, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockServicerMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockServicer)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockServicer) GetUserByID(ctx context.Context, ID int) (*model.User, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, ID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServicerMockRecorder) GetUserByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockServicer)(nil).GetUserByID), ctx, ID)
}

// GetUserCredentialByRefID mocks base method.
func (m *MockServicer) GetUserCredentialByRefID(ctx context.Context, userID int, refID model.CredentialRefID) (*model.UserCredential, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentialByRefID", ctx, userID, refID)
	ret0, _ := ret[0].(*model.UserCredential)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUserCredentialByRefID indicates an expected call of GetUserCredentialByRefID.
func (mr *MockServicerMockRecorder) GetUserCredentialByRefID(ctx, userID, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentialByRefID", reflect.TypeOf((*MockServicer)(nil).GetUserCredentialByRefID), ctx, userID, refID)
}

// GetUserCredentialCountByUser mocks base method.
func (m *MockServicer) GetUserCredentialCountByUser(ctx context.Context, userID int) (int, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentialCountByUser", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUserCredentialCountByUser indicates an expected call of GetUserCredentialCountByUser.
func (mr *MockServicerMockRecorder) GetUserCredentialCountByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentialCountByUser", reflect.TypeOf((*MockServicer)(nil).GetUserCredentialCountByUser), ctx, userID)
}

// GetUserCredentialsByUser mocks base method.
func (m *MockServicer) GetUserCredentialsByUser(ctx context.Context, userID int) ([]*model.UserCredential, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentialsByUser", ctx, userID)
	ret0, _ := ret[0].([]*model.UserCredential)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUserCredentialsByUser indicates an expected call of GetUserCredentialsByUser.
func (mr *MockServicerMockRecorder) GetUserCredentialsByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentialsByUser", reflect.TypeOf((*MockServicer)(nil).GetUserCredentialsByUser), ctx, userID)
}

// GetUserPWResetByRefID mocks base method.
func (m *MockServicer) GetUserPWResetByRefID(ctx context.Context, refID model.UserPWResetRefID) (*model.UserPWReset, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPWResetByRefID", ctx, refID)
	ret0, _ := ret[0].(*model.UserPWReset)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUserPWResetByRefID indicates an expected call of GetUserPWResetByRefID.
func (mr *MockServicerMockRecorder) GetUserPWResetByRefID(ctx, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPWResetByRefID", reflect.TypeOf((*MockServicer)(nil).GetUserPWResetByRefID), ctx, refID)
}

// GetUserVerifyByRefID mocks base method.
func (m *MockServicer) GetUserVerifyByRefID(ctx context.Context, refID model.UserVerifyRefID) (*model.UserVerify, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVerifyByRefID", ctx, refID)
	ret0, _ := ret[0].(*model.UserVerify)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUserVerifyByRefID indicates an expected call of GetUserVerifyByRefID.
func (mr *MockServicerMockRecorder) GetUserVerifyByRefID(ctx, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVerifyByRefID", reflect.TypeOf((*MockServicer)(nil).GetUserVerifyByRefID), ctx, refID)
}

// GetUsersByIDs mocks base method.
func (m *MockServicer) GetUsersByIDs(ctx context.Context, userIDs []int) ([]*model.User, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByIDs", ctx, userIDs)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// GetUsersByIDs indicates an expected call of GetUsersByIDs.
func (mr *MockServicerMockRecorder) GetUsersByIDs(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByIDs", reflect.TypeOf((*MockServicer)(nil).GetUsersByIDs), ctx, userIDs)
}

// NewApiKey mocks base method.
func (m *MockServicer) NewApiKey(ctx context.Context, userID int) (*model.ApiKey, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewApiKey", ctx, userID)
	ret0, _ := ret[0].(*model.ApiKey)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// NewApiKey indicates an expected call of NewApiKey.
func (mr *MockServicerMockRecorder) NewApiKey(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewApiKey", reflect.TypeOf((*MockServicer)(nil).NewApiKey), ctx, userID)
}

// NewApiKeyIfNotExists mocks base method.
func (m *MockServicer) NewApiKeyIfNotExists(ctx context.Context, userID int) (*model.ApiKey, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewApiKeyIfNotExists", ctx, userID)
	ret0, _ := ret[0].(*model.ApiKey)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// NewApiKeyIfNotExists indicates an expected call of NewApiKeyIfNotExists.
func (mr *MockServicerMockRecorder) NewApiKeyIfNotExists(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewApiKeyIfNotExists", reflect.TypeOf((*MockServicer)(nil).NewApiKeyIfNotExists), ctx, userID)
}

// NewEarmark mocks base method.
func (m *MockServicer) NewEarmark(ctx context.Context, user *model.User, eventItemID int, note string) (*model.Earmark, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEarmark", ctx, user, eventItemID, note)
	ret0, _ := ret[0].(*model.Earmark)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// NewEarmark indicates an expected call of NewEarmark.
func (mr *MockServicerMockRecorder) NewEarmark(ctx, user, eventItemID, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEarmark", reflect.TypeOf((*MockServicer)(nil).NewEarmark), ctx, user, eventItemID, note)
}

// NewNotification mocks base method.
func (m *MockServicer) NewNotification(ctx context.Context, userID int, message string) (*model.Notification, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNotification", ctx, userID, message)
	ret0, _ := ret[0].(*model.Notification)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// NewNotification indicates an expected call of NewNotification.
func (mr *MockServicerMockRecorder) NewNotification(ctx, userID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotification", reflect.TypeOf((*MockServicer)(nil).NewNotification), ctx, userID, message)
}

// NewUser mocks base method.
func (m *MockServicer) NewUser(ctx context.Context, email, name string, rawPass []byte) (*model.User, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", ctx, email, name, rawPass)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockServicerMockRecorder) NewUser(ctx, email, name, rawPass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockServicer)(nil).NewUser), ctx, email, name, rawPass)
}

// NewUserCredential mocks base method.
func (m *MockServicer) NewUserCredential(ctx context.Context, userID int, keyName string, credential []byte) (*model.UserCredential, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserCredential", ctx, userID, keyName, credential)
	ret0, _ := ret[0].(*model.UserCredential)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// NewUserCredential indicates an expected call of NewUserCredential.
func (mr *MockServicerMockRecorder) NewUserCredential(ctx, userID, keyName, credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserCredential", reflect.TypeOf((*MockServicer)(nil).NewUserCredential), ctx, userID, keyName, credential)
}

// NewUserPWReset mocks base method.
func (m *MockServicer) NewUserPWReset(ctx context.Context, userID int) (*model.UserPWReset, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserPWReset", ctx, userID)
	ret0, _ := ret[0].(*model.UserPWReset)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// NewUserPWReset indicates an expected call of NewUserPWReset.
func (mr *MockServicerMockRecorder) NewUserPWReset(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserPWReset", reflect.TypeOf((*MockServicer)(nil).NewUserPWReset), ctx, userID)
}

// NewUserVerify mocks base method.
func (m *MockServicer) NewUserVerify(ctx context.Context, userID int) (*model.UserVerify, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserVerify", ctx, userID)
	ret0, _ := ret[0].(*model.UserVerify)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// NewUserVerify indicates an expected call of NewUserVerify.
func (mr *MockServicerMockRecorder) NewUserVerify(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserVerify", reflect.TypeOf((*MockServicer)(nil).NewUserVerify), ctx, userID)
}

// NotifyUsersPendingEvents mocks base method.
func (m *MockServicer) NotifyUsersPendingEvents(ctx context.Context, mailer mail.MailSender, tplContainer resources.TGetter, siteBaseUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyUsersPendingEvents", ctx, mailer, tplContainer, siteBaseUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyUsersPendingEvents indicates an expected call of NotifyUsersPendingEvents.
func (mr *MockServicerMockRecorder) NotifyUsersPendingEvents(ctx, mailer, tplContainer, siteBaseUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUsersPendingEvents", reflect.TypeOf((*MockServicer)(nil).NotifyUsersPendingEvents), ctx, mailer, tplContainer, siteBaseUrl)
}

// RemoveEventItem mocks base method.
func (m *MockServicer) RemoveEventItem(ctx context.Context, userID int, eventItemRefID model.EventItemRefID, failIfChecks service.FailIfCheckFunc[*model.EventItem]) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEventItem", ctx, userID, eventItemRefID, failIfChecks)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// RemoveEventItem indicates an expected call of RemoveEventItem.
func (mr *MockServicerMockRecorder) RemoveEventItem(ctx, userID, eventItemRefID, failIfChecks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventItem", reflect.TypeOf((*MockServicer)(nil).RemoveEventItem), ctx, userID, eventItemRefID, failIfChecks)
}

// RemoveFavorite mocks base method.
func (m *MockServicer) RemoveFavorite(ctx context.Context, userID int, refID model.EventRefID) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavorite", ctx, userID, refID)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// RemoveFavorite indicates an expected call of RemoveFavorite.
func (mr *MockServicerMockRecorder) RemoveFavorite(ctx, userID, refID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavorite", reflect.TypeOf((*MockServicer)(nil).RemoveFavorite), ctx, userID, refID)
}

// SetUserVerified mocks base method.
func (m *MockServicer) SetUserVerified(ctx context.Context, user *model.User, verifier *model.UserVerify) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserVerified", ctx, user, verifier)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// SetUserVerified indicates an expected call of SetUserVerified.
func (mr *MockServicerMockRecorder) SetUserVerified(ctx, user, verifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserVerified", reflect.TypeOf((*MockServicer)(nil).SetUserVerified), ctx, user, verifier)
}

// UpdateEvent mocks base method.
func (m *MockServicer) UpdateEvent(ctx context.Context, userID int, refID model.EventRefID, euvs *service.EventUpdateValues) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, userID, refID, euvs)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockServicerMockRecorder) UpdateEvent(ctx, userID, refID, euvs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockServicer)(nil).UpdateEvent), ctx, userID, refID, euvs)
}

// UpdateEventItem mocks base method.
func (m *MockServicer) UpdateEventItem(ctx context.Context, userID int, refID model.EventItemRefID, description string, failIfChecks service.FailIfCheckFunc[*model.EventItem]) (*model.EventItem, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventItem", ctx, userID, refID, description, failIfChecks)
	ret0, _ := ret[0].(*model.EventItem)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// UpdateEventItem indicates an expected call of UpdateEventItem.
func (mr *MockServicerMockRecorder) UpdateEventItem(ctx, userID, refID, description, failIfChecks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventItem", reflect.TypeOf((*MockServicer)(nil).UpdateEventItem), ctx, userID, refID, description, failIfChecks)
}

// UpdateEventItemSorting mocks base method.
func (m *MockServicer) UpdateEventItemSorting(ctx context.Context, userID int, refID model.EventRefID, itemSortOrder []int) (*model.Event, errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventItemSorting", ctx, userID, refID, itemSortOrder)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(errs.Error)
	return ret0, ret1
}

// UpdateEventItemSorting indicates an expected call of UpdateEventItemSorting.
func (mr *MockServicerMockRecorder) UpdateEventItemSorting(ctx, userID, refID, itemSortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventItemSorting", reflect.TypeOf((*MockServicer)(nil).UpdateEventItemSorting), ctx, userID, refID, itemSortOrder)
}

// UpdateUser mocks base method.
func (m *MockServicer) UpdateUser(ctx context.Context, user *model.User, euvs *service.UserUpdateValues) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user, euvs)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockServicerMockRecorder) UpdateUser(ctx, user, euvs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockServicer)(nil).UpdateUser), ctx, user, euvs)
}

// UpdateUserPWReset mocks base method.
func (m *MockServicer) UpdateUserPWReset(ctx context.Context, user *model.User, upw *model.UserPWReset) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPWReset", ctx, user, upw)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// UpdateUserPWReset indicates an expected call of UpdateUserPWReset.
func (mr *MockServicerMockRecorder) UpdateUserPWReset(ctx, user, upw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPWReset", reflect.TypeOf((*MockServicer)(nil).UpdateUserPWReset), ctx, user, upw)
}

// UpdateUserSettings mocks base method.
func (m *MockServicer) UpdateUserSettings(ctx context.Context, userID int, pm *model.UserSettings) errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSettings", ctx, userID, pm)
	ret0, _ := ret[0].(errs.Error)
	return ret0
}

// UpdateUserSettings indicates an expected call of UpdateUserSettings.
func (mr *MockServicerMockRecorder) UpdateUserSettings(ctx, userID, pm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSettings", reflect.TypeOf((*MockServicer)(nil).UpdateUserSettings), ctx, userID, pm)
}

// WebAuthnUserFrom mocks base method.
func (m *MockServicer) WebAuthnUserFrom(user *model.User) *service.WebAuthnUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebAuthnUserFrom", user)
	ret0, _ := ret[0].(*service.WebAuthnUser)
	return ret0
}

// WebAuthnUserFrom indicates an expected call of WebAuthnUserFrom.
func (mr *MockServicerMockRecorder) WebAuthnUserFrom(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebAuthnUserFrom", reflect.TypeOf((*MockServicer)(nil).WebAuthnUserFrom), user)
}
