# environment
BUILDDIR            := ${CURDIR}/build
ARCH                := $(shell go env GOHOSTARCH)
OS                  := $(shell go env GOHOSTOS)
GOVER               := $(shell go version | awk '{print $$3}' | tr -d '.')

# app specific info
APP_VER             ?= $(shell git describe --always --tags|sed 's/^v//')
GITHASH             ?= $(shell git rev-parse --short HEAD)
GOPATH              := $(shell go env GOPATH)
GOBIN               := ${GOPATH}/bin
VERSION_VAR         := main.ServerVersion
DB_DSN              ?= "postgres://postgres:password@127.0.0.1:5432/icbt?sslmode=disable"
GOOSE_DRIVER        ?= postgres
GOOSE_DBSTRING      ?= ${DB_DSN}
GOOSE_MIGRATION_DIR ?= database/migrations

# flags and build configuration
GOBUILD_OPTIONS     ?= -trimpath
GOTEST_FLAGS        ?=
GOTEST_BENCHFLAGS   ?=
GOBUILD_DEPFLAGS    ?= -tags netgo,production
GOBUILD_LDFLAGS     ?= -s -w
GOBUILD_FLAGS       := ${GOBUILD_DEPFLAGS} ${GOBUILD_OPTIONS} -ldflags "${GOBUILD_LDFLAGS} -X ${VERSION_VAR}=${APP_VER}"

# cross compile defs
CC_BUILD_TARGETS     = server notifier
CC_BUILD_ARCHES      = darwin/amd64 darwin/arm64 freebsd/amd64 linux/amd64 linux/arm64 windows/amd64
CC_OUTPUT_TPL       := ${BUILDDIR}/bin/{{.Dir}}.{{.OS}}-{{.Arch}}

# misc
DOCKER_PREBUILD     ?=
DOCKER_POSTBUILD    ?=
PGDATABASE          ?= icbt
PGPASSWORD          ?= password
REDIS_PASS          ?= password

# some exported vars (pre-configure go build behavior)
export GO111MODULE=on
#export CGO_ENABLED=0
## enable go 1.21 loopvar "experiment"
export GOEXPERIMENT=loopvar
export GOOSE_DRIVER
export GOOSE_DBSTRING
export GOOSE_MIGRATION_DIR

define HELP_OUTPUT
Available targets:
  help                this help
  clean               clean up
  all                 build binaries and man pages
  check               run checks and validators
  test                run tests
  cover               run tests with cover output
  bench               run benchmarks
  build               build all binaries
endef
export HELP_OUTPUT

.PHONY: help
help:
	@echo "$$HELP_OUTPUT"

.PHONY: clean
clean:
	@rm -rf "${BUILDDIR}"

.PHONY: setup
setup:

.PHONY: setup-check
setup-check: ${GOBIN}/staticcheck ${GOBIN}/gosec ${GOBIN}/govulncheck

${GOBIN}/staticcheck:
	go install honnef.co/go/tools/cmd/staticcheck@latest

${GOBIN}/gosec:
	go install github.com/securego/gosec/v2/cmd/gosec@latest

${GOBIN}/govulncheck:
	go install golang.org/x/vuln/cmd/govulncheck@latest

${GOBIN}/stringer:
	go install golang.org/x/tools/cmd/stringer@latest

.PHONY: generate
generate: setup
	@echo ">> Generating..."
	@go generate ./...

.PHONY: build
build: setup
	@echo ">> Building..."
	@[ -d "${BUILDDIR}/bin" ] || mkdir -p "${BUILDDIR}/bin"
	@(for x in ${CC_BUILD_TARGETS}; do \
		echo "...$${x}..."; \
		go build ${GOBUILD_FLAGS} -o "${BUILDDIR}/bin/$${x}" ./cmd/$${x}; \
	done)
	@echo "done!"

.PHONY: test
test: setup
	@echo ">> Running tests..."
	@go test -count=1 -vet=off ${GOTEST_FLAGS} ./...

.PHONY: bench
bench: setup
	@echo ">> Running benchmarks..."
	@go test -bench="." -run="^$$" -test.benchmem=true ${GOTEST_BENCHFLAGS} ./...

.PHONY: cover
cover: setup
	@echo ">> Running tests with coverage..."
	@go test -vet=off -cover ${GOTEST_FLAGS} ./...

.PHONY: clean-generated
clean-generated: setup
	@echo ">> Purging generated files..."
	@grep -lRE '^// Code generated by (.+). DO NOT EDIT' internal/ | xargs rm -v

.PHONY: check
check: setup setup-check
	@echo ">> Running checks and validators..."
	@echo "... staticcheck ..."
	@${GOBIN}/staticcheck ./...
	@echo "... go-vet ..."
	@go vet ./...
	@echo "... gosec ..."
	@${GOBIN}/gosec -quiet -exclude-generated -exclude-dir=cmd/refidgen -exclude-dir=tools ./...
	@echo "... govulncheck ..."
	@${GOBIN}/govulncheck ./...

.PHONY: update-go-deps
update-go-deps:
	@echo ">> updating Go dependencies..."
	@GOPRIVATE=github.com/dropwhile go get -u all
	@go mod tidy

.PHONY: migrate
migrate:
	@echo ">> running migrations..."
	@goose up

.PHONY: cloc
cloc:
	@echo ">> counting stuff..."
	@cloc -v 2 --force-lang=HTML,gohtml --fullpath --not-match-d resources/static/ .

.PHONY: dev-db-create
dev-db-create:
	@echo ">> starting dev postgres,redis ..."
	@docker volume rm -f icbt-db-init
	@docker volume create icbt-db-init
	@docker create -v icbt-db-init:/data --name icbt-db-helper busybox true
	@for f in  ./database/init/*; do docker cp -q "$${f}" icbt-db-helper:/data; done
	@docker rm -f icbt-db-helper
	@docker run \
		--name icbt-database \
		--restart always \
		-e POSTGRES_PASSWORD=${PGPASSWORD} \
		-e POSTGRES_DB=${PGDATABASE} \
		-p 5432:5432 \
		-v "icbt-db-init:/docker-entrypoint-initdb.d/" \
		-d postgres \
		postgres -c jit=off
	@docker run \
		--name icbt-redis \
		--restart always \
		-p 6379:6379 \
		-d redis:7-alpine \
		redis-server --requirepass "${REDIS_PASS}"

.PHONY: dev-db-start
dev-db-start:
	@echo ">> starting dev postgres,redis ..."
	@docker start icbt-db-init
	@docker start icbt-redis

dev-db-stop:
	@echo ">> stopping dev postgres,redis ..."
	@docker stop icbt-database
	@docker stop icbt-redis

dev-db-purge:
	@echo ">> purging dev postgres,redis ..."
	@docker rm -fv icbt-database
	@docker rm -fv icbt-redis
	@docker volume rm -f icbt-db-init

.PHONY: docker-build
docker-build:
	@echo ">> Building docker image..."
	@${DOCKER_PREBUILD}
	@DOCKER_BUILDKIT=1 docker build \
		--build-arg GITHASH=${GITHASH} \
		--build-arg APP_VER=${APP_VER} \
		--build-arg BUILDKIT_INLINE_CACHE=1 \
		--cache-from icbt:latest \
		-t icbt:latest \
		-f docker/Dockerfile \
		.
	@${DOCKER_POSTBUILD}

.PHONY: run
run: build
	@echo ">> starting dev server..."
	@exec ./build/bin/server

.PHONY: devrun
devrun:
	@echo ">> Monitoring for change, runnging tests, and restarting..."
	@modd -f .modd.conf

.PHONY: all
all: build
