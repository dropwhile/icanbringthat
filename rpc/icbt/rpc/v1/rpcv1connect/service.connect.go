// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: icbt/rpc/v1/service.proto

package rpcv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dropwhile/icanbringthat/rpc/icbt/rpc/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IcbtRpcServiceName is the fully-qualified name of the IcbtRpcService service.
	IcbtRpcServiceName = "icbt.rpc.v1.IcbtRpcService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IcbtRpcServiceEarmarkCreateProcedure is the fully-qualified name of the IcbtRpcService's
	// EarmarkCreate RPC.
	IcbtRpcServiceEarmarkCreateProcedure = "/icbt.rpc.v1.IcbtRpcService/EarmarkCreate"
	// IcbtRpcServiceEarmarkGetDetailsProcedure is the fully-qualified name of the IcbtRpcService's
	// EarmarkGetDetails RPC.
	IcbtRpcServiceEarmarkGetDetailsProcedure = "/icbt.rpc.v1.IcbtRpcService/EarmarkGetDetails"
	// IcbtRpcServiceEarmarkRemoveProcedure is the fully-qualified name of the IcbtRpcService's
	// EarmarkRemove RPC.
	IcbtRpcServiceEarmarkRemoveProcedure = "/icbt.rpc.v1.IcbtRpcService/EarmarkRemove"
	// IcbtRpcServiceEarmarksListProcedure is the fully-qualified name of the IcbtRpcService's
	// EarmarksList RPC.
	IcbtRpcServiceEarmarksListProcedure = "/icbt.rpc.v1.IcbtRpcService/EarmarksList"
	// IcbtRpcServiceEventCreateProcedure is the fully-qualified name of the IcbtRpcService's
	// EventCreate RPC.
	IcbtRpcServiceEventCreateProcedure = "/icbt.rpc.v1.IcbtRpcService/EventCreate"
	// IcbtRpcServiceEventUpdateProcedure is the fully-qualified name of the IcbtRpcService's
	// EventUpdate RPC.
	IcbtRpcServiceEventUpdateProcedure = "/icbt.rpc.v1.IcbtRpcService/EventUpdate"
	// IcbtRpcServiceEventDeleteProcedure is the fully-qualified name of the IcbtRpcService's
	// EventDelete RPC.
	IcbtRpcServiceEventDeleteProcedure = "/icbt.rpc.v1.IcbtRpcService/EventDelete"
	// IcbtRpcServiceEventsListProcedure is the fully-qualified name of the IcbtRpcService's EventsList
	// RPC.
	IcbtRpcServiceEventsListProcedure = "/icbt.rpc.v1.IcbtRpcService/EventsList"
	// IcbtRpcServiceEventGetDetailsProcedure is the fully-qualified name of the IcbtRpcService's
	// EventGetDetails RPC.
	IcbtRpcServiceEventGetDetailsProcedure = "/icbt.rpc.v1.IcbtRpcService/EventGetDetails"
	// IcbtRpcServiceEventListItemsProcedure is the fully-qualified name of the IcbtRpcService's
	// EventListItems RPC.
	IcbtRpcServiceEventListItemsProcedure = "/icbt.rpc.v1.IcbtRpcService/EventListItems"
	// IcbtRpcServiceEventListEarmarksProcedure is the fully-qualified name of the IcbtRpcService's
	// EventListEarmarks RPC.
	IcbtRpcServiceEventListEarmarksProcedure = "/icbt.rpc.v1.IcbtRpcService/EventListEarmarks"
	// IcbtRpcServiceEventAddItemProcedure is the fully-qualified name of the IcbtRpcService's
	// EventAddItem RPC.
	IcbtRpcServiceEventAddItemProcedure = "/icbt.rpc.v1.IcbtRpcService/EventAddItem"
	// IcbtRpcServiceEventUpdateItemProcedure is the fully-qualified name of the IcbtRpcService's
	// EventUpdateItem RPC.
	IcbtRpcServiceEventUpdateItemProcedure = "/icbt.rpc.v1.IcbtRpcService/EventUpdateItem"
	// IcbtRpcServiceEventRemoveItemProcedure is the fully-qualified name of the IcbtRpcService's
	// EventRemoveItem RPC.
	IcbtRpcServiceEventRemoveItemProcedure = "/icbt.rpc.v1.IcbtRpcService/EventRemoveItem"
	// IcbtRpcServiceFavoriteAddProcedure is the fully-qualified name of the IcbtRpcService's
	// FavoriteAdd RPC.
	IcbtRpcServiceFavoriteAddProcedure = "/icbt.rpc.v1.IcbtRpcService/FavoriteAdd"
	// IcbtRpcServiceFavoriteRemoveProcedure is the fully-qualified name of the IcbtRpcService's
	// FavoriteRemove RPC.
	IcbtRpcServiceFavoriteRemoveProcedure = "/icbt.rpc.v1.IcbtRpcService/FavoriteRemove"
	// IcbtRpcServiceFavoriteListEventsProcedure is the fully-qualified name of the IcbtRpcService's
	// FavoriteListEvents RPC.
	IcbtRpcServiceFavoriteListEventsProcedure = "/icbt.rpc.v1.IcbtRpcService/FavoriteListEvents"
	// IcbtRpcServiceNotificationDeleteProcedure is the fully-qualified name of the IcbtRpcService's
	// NotificationDelete RPC.
	IcbtRpcServiceNotificationDeleteProcedure = "/icbt.rpc.v1.IcbtRpcService/NotificationDelete"
	// IcbtRpcServiceNotificationsDeleteAllProcedure is the fully-qualified name of the IcbtRpcService's
	// NotificationsDeleteAll RPC.
	IcbtRpcServiceNotificationsDeleteAllProcedure = "/icbt.rpc.v1.IcbtRpcService/NotificationsDeleteAll"
	// IcbtRpcServiceNotificationsListProcedure is the fully-qualified name of the IcbtRpcService's
	// NotificationsList RPC.
	IcbtRpcServiceNotificationsListProcedure = "/icbt.rpc.v1.IcbtRpcService/NotificationsList"
)

// IcbtRpcServiceClient is a client for the icbt.rpc.v1.IcbtRpcService service.
type IcbtRpcServiceClient interface {
	// earmark
	EarmarkCreate(context.Context, *connect.Request[v1.EarmarkCreateRequest]) (*connect.Response[v1.EarmarkCreateResponse], error)
	EarmarkGetDetails(context.Context, *connect.Request[v1.EarmarkGetDetailsRequest]) (*connect.Response[v1.EarmarkGetDetailsResponse], error)
	EarmarkRemove(context.Context, *connect.Request[v1.EarmarkRemoveRequest]) (*connect.Response[emptypb.Empty], error)
	EarmarksList(context.Context, *connect.Request[v1.EarmarksListRequest]) (*connect.Response[v1.EarmarksListResponse], error)
	// events
	EventCreate(context.Context, *connect.Request[v1.EventCreateRequest]) (*connect.Response[v1.EventCreateResponse], error)
	EventUpdate(context.Context, *connect.Request[v1.EventUpdateRequest]) (*connect.Response[emptypb.Empty], error)
	EventDelete(context.Context, *connect.Request[v1.EventDeleteRequest]) (*connect.Response[emptypb.Empty], error)
	EventsList(context.Context, *connect.Request[v1.EventsListRequest]) (*connect.Response[v1.EventsListResponse], error)
	EventGetDetails(context.Context, *connect.Request[v1.EventGetDetailsRequest]) (*connect.Response[v1.EventGetDetailsResponse], error)
	EventListItems(context.Context, *connect.Request[v1.EventListItemsRequest]) (*connect.Response[v1.EventListItemsResponse], error)
	EventListEarmarks(context.Context, *connect.Request[v1.EventListEarmarksRequest]) (*connect.Response[v1.EventListEarmarksResponse], error)
	// event-items
	EventAddItem(context.Context, *connect.Request[v1.EventAddItemRequest]) (*connect.Response[v1.EventAddItemResponse], error)
	EventUpdateItem(context.Context, *connect.Request[v1.EventUpdateItemRequest]) (*connect.Response[v1.EventUpdateItemResponse], error)
	EventRemoveItem(context.Context, *connect.Request[v1.EventRemoveItemRequest]) (*connect.Response[emptypb.Empty], error)
	// favorites
	FavoriteAdd(context.Context, *connect.Request[v1.FavoriteAddRequest]) (*connect.Response[v1.FavoriteAddResponse], error)
	FavoriteRemove(context.Context, *connect.Request[v1.FavoriteRemoveRequest]) (*connect.Response[emptypb.Empty], error)
	FavoriteListEvents(context.Context, *connect.Request[v1.FavoriteListEventsRequest]) (*connect.Response[v1.FavoriteListEventsResponse], error)
	// notifications
	NotificationDelete(context.Context, *connect.Request[v1.NotificationDeleteRequest]) (*connect.Response[emptypb.Empty], error)
	NotificationsDeleteAll(context.Context, *connect.Request[v1.NotificationsDeleteAllRequest]) (*connect.Response[emptypb.Empty], error)
	NotificationsList(context.Context, *connect.Request[v1.NotificationsListRequest]) (*connect.Response[v1.NotificationsListResponse], error)
}

// NewIcbtRpcServiceClient constructs a client for the icbt.rpc.v1.IcbtRpcService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIcbtRpcServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IcbtRpcServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	icbtRpcServiceMethods := v1.File_icbt_rpc_v1_service_proto.Services().ByName("IcbtRpcService").Methods()
	return &icbtRpcServiceClient{
		earmarkCreate: connect.NewClient[v1.EarmarkCreateRequest, v1.EarmarkCreateResponse](
			httpClient,
			baseURL+IcbtRpcServiceEarmarkCreateProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EarmarkCreate")),
			connect.WithClientOptions(opts...),
		),
		earmarkGetDetails: connect.NewClient[v1.EarmarkGetDetailsRequest, v1.EarmarkGetDetailsResponse](
			httpClient,
			baseURL+IcbtRpcServiceEarmarkGetDetailsProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EarmarkGetDetails")),
			connect.WithClientOptions(opts...),
		),
		earmarkRemove: connect.NewClient[v1.EarmarkRemoveRequest, emptypb.Empty](
			httpClient,
			baseURL+IcbtRpcServiceEarmarkRemoveProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EarmarkRemove")),
			connect.WithClientOptions(opts...),
		),
		earmarksList: connect.NewClient[v1.EarmarksListRequest, v1.EarmarksListResponse](
			httpClient,
			baseURL+IcbtRpcServiceEarmarksListProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EarmarksList")),
			connect.WithClientOptions(opts...),
		),
		eventCreate: connect.NewClient[v1.EventCreateRequest, v1.EventCreateResponse](
			httpClient,
			baseURL+IcbtRpcServiceEventCreateProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventCreate")),
			connect.WithClientOptions(opts...),
		),
		eventUpdate: connect.NewClient[v1.EventUpdateRequest, emptypb.Empty](
			httpClient,
			baseURL+IcbtRpcServiceEventUpdateProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventUpdate")),
			connect.WithClientOptions(opts...),
		),
		eventDelete: connect.NewClient[v1.EventDeleteRequest, emptypb.Empty](
			httpClient,
			baseURL+IcbtRpcServiceEventDeleteProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventDelete")),
			connect.WithClientOptions(opts...),
		),
		eventsList: connect.NewClient[v1.EventsListRequest, v1.EventsListResponse](
			httpClient,
			baseURL+IcbtRpcServiceEventsListProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventsList")),
			connect.WithClientOptions(opts...),
		),
		eventGetDetails: connect.NewClient[v1.EventGetDetailsRequest, v1.EventGetDetailsResponse](
			httpClient,
			baseURL+IcbtRpcServiceEventGetDetailsProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventGetDetails")),
			connect.WithClientOptions(opts...),
		),
		eventListItems: connect.NewClient[v1.EventListItemsRequest, v1.EventListItemsResponse](
			httpClient,
			baseURL+IcbtRpcServiceEventListItemsProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventListItems")),
			connect.WithClientOptions(opts...),
		),
		eventListEarmarks: connect.NewClient[v1.EventListEarmarksRequest, v1.EventListEarmarksResponse](
			httpClient,
			baseURL+IcbtRpcServiceEventListEarmarksProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventListEarmarks")),
			connect.WithClientOptions(opts...),
		),
		eventAddItem: connect.NewClient[v1.EventAddItemRequest, v1.EventAddItemResponse](
			httpClient,
			baseURL+IcbtRpcServiceEventAddItemProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventAddItem")),
			connect.WithClientOptions(opts...),
		),
		eventUpdateItem: connect.NewClient[v1.EventUpdateItemRequest, v1.EventUpdateItemResponse](
			httpClient,
			baseURL+IcbtRpcServiceEventUpdateItemProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventUpdateItem")),
			connect.WithClientOptions(opts...),
		),
		eventRemoveItem: connect.NewClient[v1.EventRemoveItemRequest, emptypb.Empty](
			httpClient,
			baseURL+IcbtRpcServiceEventRemoveItemProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("EventRemoveItem")),
			connect.WithClientOptions(opts...),
		),
		favoriteAdd: connect.NewClient[v1.FavoriteAddRequest, v1.FavoriteAddResponse](
			httpClient,
			baseURL+IcbtRpcServiceFavoriteAddProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("FavoriteAdd")),
			connect.WithClientOptions(opts...),
		),
		favoriteRemove: connect.NewClient[v1.FavoriteRemoveRequest, emptypb.Empty](
			httpClient,
			baseURL+IcbtRpcServiceFavoriteRemoveProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("FavoriteRemove")),
			connect.WithClientOptions(opts...),
		),
		favoriteListEvents: connect.NewClient[v1.FavoriteListEventsRequest, v1.FavoriteListEventsResponse](
			httpClient,
			baseURL+IcbtRpcServiceFavoriteListEventsProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("FavoriteListEvents")),
			connect.WithClientOptions(opts...),
		),
		notificationDelete: connect.NewClient[v1.NotificationDeleteRequest, emptypb.Empty](
			httpClient,
			baseURL+IcbtRpcServiceNotificationDeleteProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("NotificationDelete")),
			connect.WithClientOptions(opts...),
		),
		notificationsDeleteAll: connect.NewClient[v1.NotificationsDeleteAllRequest, emptypb.Empty](
			httpClient,
			baseURL+IcbtRpcServiceNotificationsDeleteAllProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("NotificationsDeleteAll")),
			connect.WithClientOptions(opts...),
		),
		notificationsList: connect.NewClient[v1.NotificationsListRequest, v1.NotificationsListResponse](
			httpClient,
			baseURL+IcbtRpcServiceNotificationsListProcedure,
			connect.WithSchema(icbtRpcServiceMethods.ByName("NotificationsList")),
			connect.WithClientOptions(opts...),
		),
	}
}

// icbtRpcServiceClient implements IcbtRpcServiceClient.
type icbtRpcServiceClient struct {
	earmarkCreate          *connect.Client[v1.EarmarkCreateRequest, v1.EarmarkCreateResponse]
	earmarkGetDetails      *connect.Client[v1.EarmarkGetDetailsRequest, v1.EarmarkGetDetailsResponse]
	earmarkRemove          *connect.Client[v1.EarmarkRemoveRequest, emptypb.Empty]
	earmarksList           *connect.Client[v1.EarmarksListRequest, v1.EarmarksListResponse]
	eventCreate            *connect.Client[v1.EventCreateRequest, v1.EventCreateResponse]
	eventUpdate            *connect.Client[v1.EventUpdateRequest, emptypb.Empty]
	eventDelete            *connect.Client[v1.EventDeleteRequest, emptypb.Empty]
	eventsList             *connect.Client[v1.EventsListRequest, v1.EventsListResponse]
	eventGetDetails        *connect.Client[v1.EventGetDetailsRequest, v1.EventGetDetailsResponse]
	eventListItems         *connect.Client[v1.EventListItemsRequest, v1.EventListItemsResponse]
	eventListEarmarks      *connect.Client[v1.EventListEarmarksRequest, v1.EventListEarmarksResponse]
	eventAddItem           *connect.Client[v1.EventAddItemRequest, v1.EventAddItemResponse]
	eventUpdateItem        *connect.Client[v1.EventUpdateItemRequest, v1.EventUpdateItemResponse]
	eventRemoveItem        *connect.Client[v1.EventRemoveItemRequest, emptypb.Empty]
	favoriteAdd            *connect.Client[v1.FavoriteAddRequest, v1.FavoriteAddResponse]
	favoriteRemove         *connect.Client[v1.FavoriteRemoveRequest, emptypb.Empty]
	favoriteListEvents     *connect.Client[v1.FavoriteListEventsRequest, v1.FavoriteListEventsResponse]
	notificationDelete     *connect.Client[v1.NotificationDeleteRequest, emptypb.Empty]
	notificationsDeleteAll *connect.Client[v1.NotificationsDeleteAllRequest, emptypb.Empty]
	notificationsList      *connect.Client[v1.NotificationsListRequest, v1.NotificationsListResponse]
}

// EarmarkCreate calls icbt.rpc.v1.IcbtRpcService.EarmarkCreate.
func (c *icbtRpcServiceClient) EarmarkCreate(ctx context.Context, req *connect.Request[v1.EarmarkCreateRequest]) (*connect.Response[v1.EarmarkCreateResponse], error) {
	return c.earmarkCreate.CallUnary(ctx, req)
}

// EarmarkGetDetails calls icbt.rpc.v1.IcbtRpcService.EarmarkGetDetails.
func (c *icbtRpcServiceClient) EarmarkGetDetails(ctx context.Context, req *connect.Request[v1.EarmarkGetDetailsRequest]) (*connect.Response[v1.EarmarkGetDetailsResponse], error) {
	return c.earmarkGetDetails.CallUnary(ctx, req)
}

// EarmarkRemove calls icbt.rpc.v1.IcbtRpcService.EarmarkRemove.
func (c *icbtRpcServiceClient) EarmarkRemove(ctx context.Context, req *connect.Request[v1.EarmarkRemoveRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.earmarkRemove.CallUnary(ctx, req)
}

// EarmarksList calls icbt.rpc.v1.IcbtRpcService.EarmarksList.
func (c *icbtRpcServiceClient) EarmarksList(ctx context.Context, req *connect.Request[v1.EarmarksListRequest]) (*connect.Response[v1.EarmarksListResponse], error) {
	return c.earmarksList.CallUnary(ctx, req)
}

// EventCreate calls icbt.rpc.v1.IcbtRpcService.EventCreate.
func (c *icbtRpcServiceClient) EventCreate(ctx context.Context, req *connect.Request[v1.EventCreateRequest]) (*connect.Response[v1.EventCreateResponse], error) {
	return c.eventCreate.CallUnary(ctx, req)
}

// EventUpdate calls icbt.rpc.v1.IcbtRpcService.EventUpdate.
func (c *icbtRpcServiceClient) EventUpdate(ctx context.Context, req *connect.Request[v1.EventUpdateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.eventUpdate.CallUnary(ctx, req)
}

// EventDelete calls icbt.rpc.v1.IcbtRpcService.EventDelete.
func (c *icbtRpcServiceClient) EventDelete(ctx context.Context, req *connect.Request[v1.EventDeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.eventDelete.CallUnary(ctx, req)
}

// EventsList calls icbt.rpc.v1.IcbtRpcService.EventsList.
func (c *icbtRpcServiceClient) EventsList(ctx context.Context, req *connect.Request[v1.EventsListRequest]) (*connect.Response[v1.EventsListResponse], error) {
	return c.eventsList.CallUnary(ctx, req)
}

// EventGetDetails calls icbt.rpc.v1.IcbtRpcService.EventGetDetails.
func (c *icbtRpcServiceClient) EventGetDetails(ctx context.Context, req *connect.Request[v1.EventGetDetailsRequest]) (*connect.Response[v1.EventGetDetailsResponse], error) {
	return c.eventGetDetails.CallUnary(ctx, req)
}

// EventListItems calls icbt.rpc.v1.IcbtRpcService.EventListItems.
func (c *icbtRpcServiceClient) EventListItems(ctx context.Context, req *connect.Request[v1.EventListItemsRequest]) (*connect.Response[v1.EventListItemsResponse], error) {
	return c.eventListItems.CallUnary(ctx, req)
}

// EventListEarmarks calls icbt.rpc.v1.IcbtRpcService.EventListEarmarks.
func (c *icbtRpcServiceClient) EventListEarmarks(ctx context.Context, req *connect.Request[v1.EventListEarmarksRequest]) (*connect.Response[v1.EventListEarmarksResponse], error) {
	return c.eventListEarmarks.CallUnary(ctx, req)
}

// EventAddItem calls icbt.rpc.v1.IcbtRpcService.EventAddItem.
func (c *icbtRpcServiceClient) EventAddItem(ctx context.Context, req *connect.Request[v1.EventAddItemRequest]) (*connect.Response[v1.EventAddItemResponse], error) {
	return c.eventAddItem.CallUnary(ctx, req)
}

// EventUpdateItem calls icbt.rpc.v1.IcbtRpcService.EventUpdateItem.
func (c *icbtRpcServiceClient) EventUpdateItem(ctx context.Context, req *connect.Request[v1.EventUpdateItemRequest]) (*connect.Response[v1.EventUpdateItemResponse], error) {
	return c.eventUpdateItem.CallUnary(ctx, req)
}

// EventRemoveItem calls icbt.rpc.v1.IcbtRpcService.EventRemoveItem.
func (c *icbtRpcServiceClient) EventRemoveItem(ctx context.Context, req *connect.Request[v1.EventRemoveItemRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.eventRemoveItem.CallUnary(ctx, req)
}

// FavoriteAdd calls icbt.rpc.v1.IcbtRpcService.FavoriteAdd.
func (c *icbtRpcServiceClient) FavoriteAdd(ctx context.Context, req *connect.Request[v1.FavoriteAddRequest]) (*connect.Response[v1.FavoriteAddResponse], error) {
	return c.favoriteAdd.CallUnary(ctx, req)
}

// FavoriteRemove calls icbt.rpc.v1.IcbtRpcService.FavoriteRemove.
func (c *icbtRpcServiceClient) FavoriteRemove(ctx context.Context, req *connect.Request[v1.FavoriteRemoveRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.favoriteRemove.CallUnary(ctx, req)
}

// FavoriteListEvents calls icbt.rpc.v1.IcbtRpcService.FavoriteListEvents.
func (c *icbtRpcServiceClient) FavoriteListEvents(ctx context.Context, req *connect.Request[v1.FavoriteListEventsRequest]) (*connect.Response[v1.FavoriteListEventsResponse], error) {
	return c.favoriteListEvents.CallUnary(ctx, req)
}

// NotificationDelete calls icbt.rpc.v1.IcbtRpcService.NotificationDelete.
func (c *icbtRpcServiceClient) NotificationDelete(ctx context.Context, req *connect.Request[v1.NotificationDeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.notificationDelete.CallUnary(ctx, req)
}

// NotificationsDeleteAll calls icbt.rpc.v1.IcbtRpcService.NotificationsDeleteAll.
func (c *icbtRpcServiceClient) NotificationsDeleteAll(ctx context.Context, req *connect.Request[v1.NotificationsDeleteAllRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.notificationsDeleteAll.CallUnary(ctx, req)
}

// NotificationsList calls icbt.rpc.v1.IcbtRpcService.NotificationsList.
func (c *icbtRpcServiceClient) NotificationsList(ctx context.Context, req *connect.Request[v1.NotificationsListRequest]) (*connect.Response[v1.NotificationsListResponse], error) {
	return c.notificationsList.CallUnary(ctx, req)
}

// IcbtRpcServiceHandler is an implementation of the icbt.rpc.v1.IcbtRpcService service.
type IcbtRpcServiceHandler interface {
	// earmark
	EarmarkCreate(context.Context, *connect.Request[v1.EarmarkCreateRequest]) (*connect.Response[v1.EarmarkCreateResponse], error)
	EarmarkGetDetails(context.Context, *connect.Request[v1.EarmarkGetDetailsRequest]) (*connect.Response[v1.EarmarkGetDetailsResponse], error)
	EarmarkRemove(context.Context, *connect.Request[v1.EarmarkRemoveRequest]) (*connect.Response[emptypb.Empty], error)
	EarmarksList(context.Context, *connect.Request[v1.EarmarksListRequest]) (*connect.Response[v1.EarmarksListResponse], error)
	// events
	EventCreate(context.Context, *connect.Request[v1.EventCreateRequest]) (*connect.Response[v1.EventCreateResponse], error)
	EventUpdate(context.Context, *connect.Request[v1.EventUpdateRequest]) (*connect.Response[emptypb.Empty], error)
	EventDelete(context.Context, *connect.Request[v1.EventDeleteRequest]) (*connect.Response[emptypb.Empty], error)
	EventsList(context.Context, *connect.Request[v1.EventsListRequest]) (*connect.Response[v1.EventsListResponse], error)
	EventGetDetails(context.Context, *connect.Request[v1.EventGetDetailsRequest]) (*connect.Response[v1.EventGetDetailsResponse], error)
	EventListItems(context.Context, *connect.Request[v1.EventListItemsRequest]) (*connect.Response[v1.EventListItemsResponse], error)
	EventListEarmarks(context.Context, *connect.Request[v1.EventListEarmarksRequest]) (*connect.Response[v1.EventListEarmarksResponse], error)
	// event-items
	EventAddItem(context.Context, *connect.Request[v1.EventAddItemRequest]) (*connect.Response[v1.EventAddItemResponse], error)
	EventUpdateItem(context.Context, *connect.Request[v1.EventUpdateItemRequest]) (*connect.Response[v1.EventUpdateItemResponse], error)
	EventRemoveItem(context.Context, *connect.Request[v1.EventRemoveItemRequest]) (*connect.Response[emptypb.Empty], error)
	// favorites
	FavoriteAdd(context.Context, *connect.Request[v1.FavoriteAddRequest]) (*connect.Response[v1.FavoriteAddResponse], error)
	FavoriteRemove(context.Context, *connect.Request[v1.FavoriteRemoveRequest]) (*connect.Response[emptypb.Empty], error)
	FavoriteListEvents(context.Context, *connect.Request[v1.FavoriteListEventsRequest]) (*connect.Response[v1.FavoriteListEventsResponse], error)
	// notifications
	NotificationDelete(context.Context, *connect.Request[v1.NotificationDeleteRequest]) (*connect.Response[emptypb.Empty], error)
	NotificationsDeleteAll(context.Context, *connect.Request[v1.NotificationsDeleteAllRequest]) (*connect.Response[emptypb.Empty], error)
	NotificationsList(context.Context, *connect.Request[v1.NotificationsListRequest]) (*connect.Response[v1.NotificationsListResponse], error)
}

// NewIcbtRpcServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIcbtRpcServiceHandler(svc IcbtRpcServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	icbtRpcServiceMethods := v1.File_icbt_rpc_v1_service_proto.Services().ByName("IcbtRpcService").Methods()
	icbtRpcServiceEarmarkCreateHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEarmarkCreateProcedure,
		svc.EarmarkCreate,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EarmarkCreate")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEarmarkGetDetailsHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEarmarkGetDetailsProcedure,
		svc.EarmarkGetDetails,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EarmarkGetDetails")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEarmarkRemoveHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEarmarkRemoveProcedure,
		svc.EarmarkRemove,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EarmarkRemove")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEarmarksListHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEarmarksListProcedure,
		svc.EarmarksList,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EarmarksList")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventCreateHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventCreateProcedure,
		svc.EventCreate,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventCreate")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventUpdateHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventUpdateProcedure,
		svc.EventUpdate,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventDeleteHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventDeleteProcedure,
		svc.EventDelete,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventDelete")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventsListHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventsListProcedure,
		svc.EventsList,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventsList")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventGetDetailsHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventGetDetailsProcedure,
		svc.EventGetDetails,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventGetDetails")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventListItemsHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventListItemsProcedure,
		svc.EventListItems,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventListItems")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventListEarmarksHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventListEarmarksProcedure,
		svc.EventListEarmarks,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventListEarmarks")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventAddItemHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventAddItemProcedure,
		svc.EventAddItem,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventAddItem")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventUpdateItemHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventUpdateItemProcedure,
		svc.EventUpdateItem,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventUpdateItem")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceEventRemoveItemHandler := connect.NewUnaryHandler(
		IcbtRpcServiceEventRemoveItemProcedure,
		svc.EventRemoveItem,
		connect.WithSchema(icbtRpcServiceMethods.ByName("EventRemoveItem")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceFavoriteAddHandler := connect.NewUnaryHandler(
		IcbtRpcServiceFavoriteAddProcedure,
		svc.FavoriteAdd,
		connect.WithSchema(icbtRpcServiceMethods.ByName("FavoriteAdd")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceFavoriteRemoveHandler := connect.NewUnaryHandler(
		IcbtRpcServiceFavoriteRemoveProcedure,
		svc.FavoriteRemove,
		connect.WithSchema(icbtRpcServiceMethods.ByName("FavoriteRemove")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceFavoriteListEventsHandler := connect.NewUnaryHandler(
		IcbtRpcServiceFavoriteListEventsProcedure,
		svc.FavoriteListEvents,
		connect.WithSchema(icbtRpcServiceMethods.ByName("FavoriteListEvents")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceNotificationDeleteHandler := connect.NewUnaryHandler(
		IcbtRpcServiceNotificationDeleteProcedure,
		svc.NotificationDelete,
		connect.WithSchema(icbtRpcServiceMethods.ByName("NotificationDelete")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceNotificationsDeleteAllHandler := connect.NewUnaryHandler(
		IcbtRpcServiceNotificationsDeleteAllProcedure,
		svc.NotificationsDeleteAll,
		connect.WithSchema(icbtRpcServiceMethods.ByName("NotificationsDeleteAll")),
		connect.WithHandlerOptions(opts...),
	)
	icbtRpcServiceNotificationsListHandler := connect.NewUnaryHandler(
		IcbtRpcServiceNotificationsListProcedure,
		svc.NotificationsList,
		connect.WithSchema(icbtRpcServiceMethods.ByName("NotificationsList")),
		connect.WithHandlerOptions(opts...),
	)
	return "/icbt.rpc.v1.IcbtRpcService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IcbtRpcServiceEarmarkCreateProcedure:
			icbtRpcServiceEarmarkCreateHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEarmarkGetDetailsProcedure:
			icbtRpcServiceEarmarkGetDetailsHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEarmarkRemoveProcedure:
			icbtRpcServiceEarmarkRemoveHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEarmarksListProcedure:
			icbtRpcServiceEarmarksListHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventCreateProcedure:
			icbtRpcServiceEventCreateHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventUpdateProcedure:
			icbtRpcServiceEventUpdateHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventDeleteProcedure:
			icbtRpcServiceEventDeleteHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventsListProcedure:
			icbtRpcServiceEventsListHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventGetDetailsProcedure:
			icbtRpcServiceEventGetDetailsHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventListItemsProcedure:
			icbtRpcServiceEventListItemsHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventListEarmarksProcedure:
			icbtRpcServiceEventListEarmarksHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventAddItemProcedure:
			icbtRpcServiceEventAddItemHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventUpdateItemProcedure:
			icbtRpcServiceEventUpdateItemHandler.ServeHTTP(w, r)
		case IcbtRpcServiceEventRemoveItemProcedure:
			icbtRpcServiceEventRemoveItemHandler.ServeHTTP(w, r)
		case IcbtRpcServiceFavoriteAddProcedure:
			icbtRpcServiceFavoriteAddHandler.ServeHTTP(w, r)
		case IcbtRpcServiceFavoriteRemoveProcedure:
			icbtRpcServiceFavoriteRemoveHandler.ServeHTTP(w, r)
		case IcbtRpcServiceFavoriteListEventsProcedure:
			icbtRpcServiceFavoriteListEventsHandler.ServeHTTP(w, r)
		case IcbtRpcServiceNotificationDeleteProcedure:
			icbtRpcServiceNotificationDeleteHandler.ServeHTTP(w, r)
		case IcbtRpcServiceNotificationsDeleteAllProcedure:
			icbtRpcServiceNotificationsDeleteAllHandler.ServeHTTP(w, r)
		case IcbtRpcServiceNotificationsListProcedure:
			icbtRpcServiceNotificationsListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIcbtRpcServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIcbtRpcServiceHandler struct{}

func (UnimplementedIcbtRpcServiceHandler) EarmarkCreate(context.Context, *connect.Request[v1.EarmarkCreateRequest]) (*connect.Response[v1.EarmarkCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EarmarkCreate is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EarmarkGetDetails(context.Context, *connect.Request[v1.EarmarkGetDetailsRequest]) (*connect.Response[v1.EarmarkGetDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EarmarkGetDetails is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EarmarkRemove(context.Context, *connect.Request[v1.EarmarkRemoveRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EarmarkRemove is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EarmarksList(context.Context, *connect.Request[v1.EarmarksListRequest]) (*connect.Response[v1.EarmarksListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EarmarksList is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventCreate(context.Context, *connect.Request[v1.EventCreateRequest]) (*connect.Response[v1.EventCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventCreate is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventUpdate(context.Context, *connect.Request[v1.EventUpdateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventUpdate is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventDelete(context.Context, *connect.Request[v1.EventDeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventDelete is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventsList(context.Context, *connect.Request[v1.EventsListRequest]) (*connect.Response[v1.EventsListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventsList is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventGetDetails(context.Context, *connect.Request[v1.EventGetDetailsRequest]) (*connect.Response[v1.EventGetDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventGetDetails is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventListItems(context.Context, *connect.Request[v1.EventListItemsRequest]) (*connect.Response[v1.EventListItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventListItems is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventListEarmarks(context.Context, *connect.Request[v1.EventListEarmarksRequest]) (*connect.Response[v1.EventListEarmarksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventListEarmarks is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventAddItem(context.Context, *connect.Request[v1.EventAddItemRequest]) (*connect.Response[v1.EventAddItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventAddItem is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventUpdateItem(context.Context, *connect.Request[v1.EventUpdateItemRequest]) (*connect.Response[v1.EventUpdateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventUpdateItem is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) EventRemoveItem(context.Context, *connect.Request[v1.EventRemoveItemRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.EventRemoveItem is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) FavoriteAdd(context.Context, *connect.Request[v1.FavoriteAddRequest]) (*connect.Response[v1.FavoriteAddResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.FavoriteAdd is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) FavoriteRemove(context.Context, *connect.Request[v1.FavoriteRemoveRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.FavoriteRemove is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) FavoriteListEvents(context.Context, *connect.Request[v1.FavoriteListEventsRequest]) (*connect.Response[v1.FavoriteListEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.FavoriteListEvents is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) NotificationDelete(context.Context, *connect.Request[v1.NotificationDeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.NotificationDelete is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) NotificationsDeleteAll(context.Context, *connect.Request[v1.NotificationsDeleteAllRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.NotificationsDeleteAll is not implemented"))
}

func (UnimplementedIcbtRpcServiceHandler) NotificationsList(context.Context, *connect.Request[v1.NotificationsListRequest]) (*connect.Response[v1.NotificationsListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("icbt.rpc.v1.IcbtRpcService.NotificationsList is not implemented"))
}
