[tools]
go = "latest"
just = "latest"
"go:github.com/cortesi/modd/cmd/modd" = "latest"
"go:gotest.tools/gotestsum" = "latest"
"go:github.com/pressly/goose/v3/cmd/goose" = "latest"

[settings]
experimental = true
fetch_remote_versions_timeout = "15s"

[vars]
build_dir = "{{ config_root }}/build"
tool_exe = "{{ config_root }}/tools/tool"

[env]
VERSION_VAR = "github.com/dropwhile/icanbringthat/internal/util.Version"
GOTOOLCHAIN = "local"
GOPRIVATE = "github.com/dropwhile/icanbringthat"
BUILDDIR = "{{ vars.build_dir }}"

[tasks.clean]
description = "clean build dir"
run = "rm -rf {{ vars.build_dir }}"

[tasks.generate]
description = "generate steps"
run = "go generate ./..."

[tasks.clean-generated]
description = "clean generated files"
run = [
    '''grep -lRE '^// Code generated by (.+) DO NOT EDIT' internal rpc | xargs rm -v''',
]

[tasks.emit-license-deps]
description = "collect and emit license info"
run = """
    {{ vars.tool_exe }} go-licenses report \
		--template internal/app/resources/templates/license.tpl \
		./... \
		> LICENSE-backend.md
"""

[tasks.test]
description = "run tests"
usage = '''
    arg "<flags>" var=#true default="-count=1 -vet=off" help="set go test flags"
'''
run = 'echo go test {{ arg(name="flags") }} ./...'

[tasks.bench]
description = "run benchmarks"
usage = '''
    arg "<flags>" var=#true default="-vet=off" help="set go test bench flags"
'''
run = 'echo go test -bench="." -run="^$" -test.benchmem=true {{ arg(name="flags") }} ./...'


[tasks.cover]
description = "run coverage analysis"
usage = '''
    arg "<flags>" var=#true default="-count=1 -vet=off" help="set go test cover flags"
'''
run = 'echo go test -cover {{ arg(name="flags") }} ./...'


[tasks."check_default:staticcheck"]
description = "run staticcheck"
run = '{{ vars.tool_exe }} staticcheck ./...'

[tasks."check_default:errcheck"]
description = "run errcheck"
run = '{{ vars.tool_exe }} errcheck -ignoretests -exclude .errcheck-excludes.txt ./...'

[tasks."check_default:errortype"]
description = "run errortype"
run = '{{ vars.tool_exe }} errortype ./...'

[tasks."check_default:vet"]
description = "run go vet"
run = 'go vet $(go list ./... | grep -v "github.com/dropwhile/icanbringthat/rpc")'

[tasks."check_default:nilness"]
description = "run nilness"
run = '{{ vars.tool_exe }} nilness ./...'

[tasks."check_default:ineffassign"]
description = "run ineffassign"
run = '{{ vars.tool_exe }} ineffassign ./...'

[tasks."check_default:govulncheck"]
description = "run govulncheck"
run = '{{ vars.tool_exe }} govulncheck ./...'

[tasks."check_default:betteralign"]
description = "run betteralign"
run = '{{ vars.tool_exe }} betteralign ./...'

[tasks."check_default:gosec"]
description = "run gosec"
run = '{{ vars.tool_exe }} gosec -quiet -exclude-generated -exclude-dir=cmd/refidgen -exclude-dir=tools ./...'

[tasks."check_optional:nilaway"]
description = "run nilaway (will have false positives)"
run = '''
    {{ vars.tool_exe }} nilaway -test=false \
		-include-pkgs "github.com/dropwhile/icanbringthat" \
		-exclude-file-docstrings "@generated,Code generated by,Autogenerated by" \
		./...
'''

[tasks."check_optional:deadcode"]
description = "run deadcode (will have false positives)"
run = '{{ vars.tool_exe }} deadcode -test ./...'

[tasks."check_optional:errorlint"]
description = "run errorlint (will have false positives)"
run = '{{ vars.tool_exe }} go-errorlint ./...'

[tasks.check]
description = "run all check_default checkers"
depends = ["check_default:*"]

[tasks.update-go-deps]
description = "update go.mod dependencies"
run = 'go get -u all'

[tasks.migrate]
env.GOOSE_DRIVER = "{{ get_env(name='GOOSE_DRIVER', default='postgres') }}"
env.GOOSE_MIGRATION_DIR = "{{ get_env(name='GOOSE_MIGRATION_DIR', default='database/migrations') }}"
description = "run migrations"
run = '{{ vars.tool_exe }} goose up'

[tasks.cloc]
description = 'count lines-of-code'
run = 'cloc -v 2 --force-lang=HTML,gohtml --fullpath --not-match-d resources/static/ .'

[tasks.build]
quiet = true
description = 'build'
env.BUILD_TARGETS = "{{ get_env(name='BUILD_TARGETS', default='server client') }}"
env.BUILD_OPTIONS = "{{ get_env(name='BUILD_OPTIONS', default='-trimpath') }}"
env.BUILD_DEPFLAGS = "{{ get_env(name='BUILD_DEPFLAGS', default='-tags netgo,production') }}"
env.BUILD_LDFLAGS = "{{ get_env(name='BUILD_LDFLAGS', default='-s -w') }}"
run = '''
#!/usr/bin/env sh
if [ "$APP_VER" = "" ]; then
    APP_VER="$(git describe --always --tags|sed 's/^v//')"
fi
[ -d "{{ vars.build_dir }}/bin" ] || mkdir -p "{{ vars.build_dir }}/bin"
echo "Building as APP_VER=${APP_VER} ..."
for x in ${BUILD_TARGETS}; do
    echo " * ${x} ...";
    go build {{ env.BUILD_DEPFLAGS }} {{ env.BUILD_OPTIONS }} \
        -ldflags="{{ env.BUILD_LDFLAGS }} -X {{ env.VERSION_VAR }}=${APP_VER}" \
        -o "{{ vars.build_dir }}/bin/${x}" ./cmd/${x};
done
'''

[tasks."docker:build"]
quiet = true
description = 'build container image'
env.DOCKER_BUILDKIT = "1"
usage = '''
    flag "--progress <progress>" help="docker build progress flag"
'''
run = '''
#!/usr/bin/env sh
if [ "$GITHASH" = "" ]; then
    GITHASH=$(git rev-parse --short HEAD)
fi
if [ "$APP_VER" = "" ]; then
    APP_VER="$(git describe --always --tags|sed 's/^v//')"
fi
eval ${DOCKER_PREBUILD}
docker build {% if option(name="progress") != "" %} --progress={{ option(name="progress") }} {% endif %} \
    --build-arg GITHASH=${GITHASH} \
    --build-arg APP_VER=${APP_VER} \
    --build-arg BUILDKIT_INLINE_CACHE=1 \
    --cache-from icanbringthat:latest \
    -t icanbringthat:latest \
    -f docker/Dockerfile \
    .
eval ${DOCKER_POSTBUILD}
'''
