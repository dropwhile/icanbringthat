# this setting will allow passing arguments through to tasks, see the docs here
# https://just.systems/man/en/settings.html#positional-arguments
set positional-arguments
# Disable echoing recipe lines before executing
set quiet
# Enable unstable features
set unstable
# Ignore recipe lines beginning with "#"
set ignore-comments

# import the user's justfile if it exists
import? '~/.justfile'
import? '~/justfile'

# import split up files
import '.justfiles/build.just'
import '.justfiles/check.just'
import '.justfiles/devrun.just'
import '.justfiles/test.just'

# set some just variables
j_dir     := justfile_directory()
tool_bin  := clean(j_dir / "tools/tool")
build_dir := clean(j_dir / "build")
cache_dir := clean(j_dir / ".cache")

# export some env vars
export VERSION_VAR := "github.com/dropwhile/icanbringthat/internal/util.Version"
export GOTOOLCHAIN := "local"
export GOPRIVATE   := "github.com/dropwhile/icanbringthat"

_banner *ARGS:
    printf '{{ YELLOW }}[%s] %-72s{{ NORMAL }}\n' "$(date +%H:%M:%S)" "{{ ARGS }}"

# show the list of available commands
[default]
help:
    just --list --justfile {{ justfile() }}

# count lines of code
cloc +FLAGS='-v=1':
    just _banner ">> counting lines of code"
    cloc {{ FLAGS }} --force-lang=HTML,gohtml --fullpath --not-match-d resources/static/ .

# clean build directory
[group('clean')]
clean:
    just _banner ">> cleaning build_dir={{ build_dir }}"
    rm -rf "{{ build_dir }}"

# clean/remove genreated code files
[group('clean')]
clean-generated:
    just _banner ">> cleaning generated files"
    grep -lRE '^// Code generated by (.+) DO NOT EDIT' internal rpc | xargs rm -v

# run code generation operations
[group('generate')]
generate:
    just _banner ">> running code generation"
    go generate ./...

# collect and emit license info
[group('generate')]
emit-license-deps:
    just _banner ">> running license report generator"
    {{ tool_bin }} go-licenses report \
        --template internal/app/resources/templates/license.tpl \
        ./... \
        > LICENSE-backend.md

# run modernize
[group('hygiene')]
modernize:
    just _banner ">> running modernize"
    {{ tool_bin }} modernize -category=-rangeint -test ./...

# update go.mod dependencies
[group('hygiene')]
update-go-deps:
    just _banner ">> updating go.mod dependencies"
    go get -u all
