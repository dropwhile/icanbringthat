{{ define "scripts_css_partial" }}
<link rel="stylesheet" type="text/css" href="/static/css/tailwind.output.css">
<link rel="stylesheet" type="text/css" href="/static/css/tooltip.css">
<link rel="stylesheet" type="text/css" href="/static/css/custom.ba4305bd90408ca8809c.css">
<link rel="stylesheet" type="text/css" href="/static/css/notyf.min.css">
<script src="/static/js/htmx.org@1.9.5.js"></script>
<script src="/static/js/htmx-alpine-morph.js"></script>
<script src="/static/js/hyperscript.org@0.9.11.js"></script>
<!-- Alpine Plugins -->
<!-- include focus BEFORE alpine core -->
<script src="/static/js/alpinejs-focus@3.x.x.js" defer></script>
<script src="/static/js/alpinejs-morph@3.x.x.js" defer></script>
<script src="/static/js/alpinejs-multi-swap@3.x.x.js" defer></script>
<!-- Alpine Core -->
<script src="/static/js/alpinejs@3.x.x.js" defer></script>
<script src="/static/js/sweetalert2@11.js" defer></script>
<script src="/static/js/sortable.js" defer></script>
<script src="/static/js/notyf.min.js"></script>
<script src="/static/js/init-alpine.js"></script>
<script src="/static/js/simplewebauthn-browser-8.3.1.min.js"></script>
<script src="/static/js/passkey.c5109913a1356dd58087916dda4f96c8.js"></script>

<script>
  //-- sortable -->
  htmx.onLoad(function(content) {
    var sortables = content.querySelectorAll(".sortable");
    for (var i = 0; i < sortables.length; i++) {
      var sortable = sortables[i];
      new Sortable(sortable, {
          animation: 150,
          ghostClass: "sortable-ghost",
          handle: ".sort-handle"
      });
    }
  });

  //-- htmx error bubbling -->
  htmx.on('htmx:afterRequest', function (evt) {
    const notyf = new Notyf({
        ripple: false,
        dismissible: true,
        duration: 2500,
        position: {
          x: 'center',
          y: 'top',
        }
    });
    console.debug("detail: ", evt.detail);
    if (evt.detail.successful) {
      // Successful request
    } else if (evt.detail.failed && evt.detail.xhr) {
        // Server error with response contents, equivalent to htmx:responseError
        const xhr = evt.detail.xhr;
        const msg = xhr.statusText ? xhr.statusText.trim() : xhr.responseText.trim();
        notyf.error(`Unexpected server error: ${msg}`);
    } else {
        // Unspecified failure, usually caused by network error
        notyf.error("Unexpected error, check your connection and try to refresh the page.");
    }
  });


  //-- focus trap for modals -->
  function myFunction(obj) {
    var copyText = obj.querySelector('.eventlink');
    var text = location.origin + copyText.innerHTML;
    navigator.clipboard.writeText(text);
    
    var tooltip = obj.querySelector('.tooltiptext');
    tooltip.innerHTML = "Link copied";
  }

  function outFunc(obj) {
    var tooltip = obj.querySelector('.tooltiptext');
    tooltip.innerHTML = "Copy link to clipboard";
  }
</script>
{{end}}